{"version":3,"sources":["../../../src/schema/types/sort.ts"],"names":["SORTABLE_ENUM","SORTABLE","NOT_SORTABLE","DEPRECATED_SORTABLE","getSortOrderEnum","schemaComposer","getOrCreateETC","etc","setFields","ASC","value","DESC","MAX_SORT_DEPTH","SORT_FIELD_DELIMITER","convert","typeComposer","fields","prefix","depth","deprecationReason","sortFields","Object","keys","forEach","fieldName","fieldConfig","sortable","UnionTypeComposer","ScalarTypeComposer","undefined","getFieldExtension","sortKey","sortKeyFieldName","split","join","type","GraphQLList","GraphQLInputObjectType","getAnyTC","name","replace","assign","getFields","getFieldsEnum","inputTypeComposer","typeName","getTypeName","fieldsEnumTypeName","fieldsEnumTypeComposer","derivedTypeName","getSortInput","getInputTypeComposer","sortOrderEnumTC","fieldsEnumTC","sortInputTypeName","getOrCreateITC","itc","addFields","order","defaultValue"],"mappings":"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","sourcesContent":["// @flow\nimport {\n  getNamedType,\n  getNullableType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLInputFieldMap,\n} from \"graphql\"\nimport { addDerivedType } from \"./derived-types\"\nimport {\n  SchemaComposer,\n  EnumTypeComposer,\n  ObjectTypeComposer,\n  InputTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  ScalarTypeComposer,\n} from \"graphql-compose\"\n\ntype AnyTypeComposer<TContext> =\n  | ObjectTypeComposer<any, TContext>\n  | InputTypeComposer<TContext>\n  | EnumTypeComposer<TContext>\n  | InterfaceTypeComposer<any, TContext>\n  | UnionTypeComposer<any, TContext>\n  | ScalarTypeComposer<TContext>\n\nexport const SORTABLE_ENUM = {\n  SORTABLE: `SORTABLE`,\n  NOT_SORTABLE: `NON_SORTABLE`,\n  DEPRECATED_SORTABLE: `DERPECATED_SORTABLE`,\n}\n\nexport const getSortOrderEnum = <TContext = any>({\n  schemaComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n}): EnumTypeComposer<TContext> =>\n  schemaComposer.getOrCreateETC(`SortOrderEnum`, etc => {\n    etc.setFields({\n      ASC: { value: `ASC` },\n      DESC: { value: `DESC` },\n    })\n  })\n\nconst MAX_SORT_DEPTH = 3\nconst SORT_FIELD_DELIMITER = `___`\n\nconst convert = <TContext = any>({\n  schemaComposer,\n  typeComposer,\n  fields,\n  prefix = null,\n  depth = 0,\n  deprecationReason,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: AnyTypeComposer<TContext>\n  fields: GraphQLInputFieldMap\n  prefix?: string | null\n  depth?: number\n  deprecationReason?: string\n}): any => {\n  const sortFields = {}\n\n  Object.keys(fields).forEach(fieldName => {\n    const fieldConfig = fields[fieldName]\n    const sortable =\n      typeComposer instanceof UnionTypeComposer ||\n      typeComposer instanceof ScalarTypeComposer\n        ? undefined\n        : typeComposer.getFieldExtension(fieldName, `sortable`)\n    if (sortable === SORTABLE_ENUM.NOT_SORTABLE) {\n      return\n    } else if (sortable === SORTABLE_ENUM.DEPRECATED_SORTABLE) {\n      deprecationReason = `Sorting on fields that need arguments to resolve is deprecated.`\n    }\n    const sortKey = prefix ? `${prefix}.${fieldName}` : fieldName\n    const sortKeyFieldName = sortKey.split(`.`).join(SORT_FIELD_DELIMITER)\n\n    // XXX(freiksenet): this is to preserve legacy behaviour, this probably doesn't actually sort\n    if (getNullableType(fieldConfig.type) instanceof GraphQLList) {\n      sortFields[sortKeyFieldName] = {\n        value: sortKey,\n        deprecationReason,\n      }\n    }\n\n    const type = getNamedType(fieldConfig.type)\n    if (type instanceof GraphQLInputObjectType) {\n      if (depth < MAX_SORT_DEPTH) {\n        const typeComposer = schemaComposer.getAnyTC(\n          type.name.replace(/Input$/, ``)\n        )\n        Object.assign(\n          sortFields,\n          convert({\n            schemaComposer,\n            typeComposer,\n            fields: type.getFields(),\n            prefix: sortKey,\n            depth: depth + 1,\n            deprecationReason,\n          })\n        )\n      }\n    } else {\n      // GraphQLScalarType || GraphQLEnumType\n      sortFields[sortKeyFieldName] = {\n        value: sortKey,\n        deprecationReason,\n      }\n    }\n  })\n  return sortFields\n}\n\nexport const getFieldsEnum = <TSource = any, TContext = any>({\n  schemaComposer,\n  typeComposer,\n  inputTypeComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer:\n    | ObjectTypeComposer<TSource, TContext>\n    | InterfaceTypeComposer<TSource, TContext>\n  inputTypeComposer: InputTypeComposer<TContext>\n}): EnumTypeComposer<TContext> => {\n  const typeName = typeComposer.getTypeName()\n  const fieldsEnumTypeName = `${typeName}FieldsEnum`\n  const fieldsEnumTypeComposer = schemaComposer.getOrCreateETC(\n    fieldsEnumTypeName\n  )\n  addDerivedType({ typeComposer, derivedTypeName: fieldsEnumTypeName })\n\n  const fields = convert({\n    schemaComposer,\n    typeComposer,\n    fields: inputTypeComposer.getFields() as GraphQLInputFieldMap,\n  })\n  fieldsEnumTypeComposer.setFields(fields)\n  return fieldsEnumTypeComposer\n}\n\nexport const getSortInput = <TSource = any, TContext = any>({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: ObjectTypeComposer<TSource, TContext>\n}): InputTypeComposer<TContext> => {\n  const inputTypeComposer = typeComposer.getInputTypeComposer()\n  const sortOrderEnumTC = getSortOrderEnum({ schemaComposer })\n  const fieldsEnumTC = getFieldsEnum({\n    schemaComposer,\n    typeComposer,\n    inputTypeComposer,\n  })\n  const typeName = typeComposer.getTypeName()\n  // console.log(fieldsEnumTC.getType().getValues())\n\n  const sortInputTypeName = `${typeName}SortInput`\n  addDerivedType({ typeComposer, derivedTypeName: sortInputTypeName })\n\n  return schemaComposer.getOrCreateITC(sortInputTypeName, itc => {\n    itc.addFields({\n      fields: [fieldsEnumTC],\n      order: { type: [sortOrderEnumTC], defaultValue: [`ASC`] },\n    })\n  })\n}\n"],"file":"sort.js"}