{"version":3,"sources":["../../../src/schema/types/node-interface.ts"],"names":["NodeInterfaceFields","getOrCreateNodeInterface","schemaComposer","internalTC","getOrCreateOTC","tc","addFields","content","contentDigest","description","fieldOwners","ignoreType","mediaType","owner","type","getInputTypeComposer","nodeInterfaceTC","getOrCreateIFTC","setDescription","id","parent","resolve","source","_args","context","path","nodeModel","getNodeById","extensions","searchable","SEARCHABLE_ENUM","SEARCHABLE","sortable","SORTABLE_ENUM","SORTABLE","needsResolve","children","getNodesByIds","ids","internal","getTypeNonNull","nodeInputTC","extendField","addNodeInterfaceFields","typeComposer","getFields","setResolveType","node","addSchemaMustHaveType","addNodeInterface","addInterface","getNodeInterface"],"mappings":";;;;;AAAA;;AACA;;AASO,MAAMA,mBAAmB,GAAG,CAAE,IAAF,EAAQ,QAAR,EAAkB,UAAlB,EAA8B,UAA9B,CAA5B;;;AAEP,MAAMC,wBAAwB,GAC5BC,cAD+B,IAEL;AAC1B;AACA;AACA;AACA,QAAMC,UAAU,GAAGD,cAAc,CAACE,cAAf,CAA+B,UAA/B,EAA0CC,EAAE,IAAI;AACjEA,IAAAA,EAAE,CAACC,SAAH,CAAa;AACXC,MAAAA,OAAO,EAAG,QADC;AAEXC,MAAAA,aAAa,EAAG,SAFL;AAGXC,MAAAA,WAAW,EAAG,QAHH;AAIXC,MAAAA,WAAW,EAAE,CAAE,QAAF,CAJF;AAKXC,MAAAA,UAAU,EAAG,SALF;AAMXC,MAAAA,SAAS,EAAG,QAND;AAOXC,MAAAA,KAAK,EAAG,SAPG;AAQXC,MAAAA,IAAI,EAAG;AARI,KAAb,EADiE,CAWjE;;AACAT,IAAAA,EAAE,CAACU,oBAAH;AACD,GAbkB,CAAnB;AAeA,QAAMC,eAAe,GAAGd,cAAc,CAACe,eAAf,CAAgC,MAAhC,EAAuCZ,EAAE,IAAI;AACnEA,IAAAA,EAAE,CAACa,cAAH,CAAmB,gBAAnB;AACAb,IAAAA,EAAE,CAACC,SAAH,CAAa;AACXa,MAAAA,EAAE,EAAG,KADM;AAEXC,MAAAA,MAAM,EAAE;AACNN,QAAAA,IAAI,EAAG,MADD;AAENO,QAAAA,OAAO,EAAE,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAAyC;AAChD,gBAAM;AAAEC,YAAAA;AAAF,cAAWD,OAAjB;AACA,iBAAOA,OAAO,CAACE,SAAR,CAAkBC,WAAlB,CAA8B;AAAER,YAAAA,EAAE,EAAEG,MAAM,CAACF;AAAb,WAA9B,EAAqD;AAAEK,YAAAA;AAAF,WAArD,CAAP;AACD,SALK;AAMNG,QAAAA,UAAU,EAAE;AACVC,UAAAA,UAAU,EAAEC,wBAAgBC,UADlB;AAEVC,UAAAA,QAAQ,EAAEC,oBAAcC,QAFd;AAGVC,UAAAA,YAAY,EAAE;AAHJ;AANN,OAFG;AAcXC,MAAAA,QAAQ,EAAE;AACRtB,QAAAA,IAAI,EAAG,UADC;AAERO,QAAAA,OAAO,EAAE,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAAyC;AAChD,gBAAM;AAAEC,YAAAA;AAAF,cAAWD,OAAjB;AACA,iBAAOA,OAAO,CAACE,SAAR,CAAkBW,aAAlB,CACL;AAAEC,YAAAA,GAAG,EAAEhB,MAAM,CAACc;AAAd,WADK,EAEL;AAAEX,YAAAA;AAAF,WAFK,CAAP;AAID,SARO;AASRG,QAAAA,UAAU,EAAE;AACVC,UAAAA,UAAU,EAAEC,wBAAgBC,UADlB;AAEVC,UAAAA,QAAQ,EAAEC,oBAAcC,QAFd;AAGVC,UAAAA,YAAY,EAAE;AAHJ;AATJ,OAdC;AA6BXI,MAAAA,QAAQ,EAAEpC,UAAU,CAACqC,cAAX;AA7BC,KAAb,EAFmE,CAiCnE;AACA;;AACA,UAAMC,WAAW,GAAGpC,EAAE,CAACU,oBAAH,EAApB;AACA0B,IAAAA,WAAW,CAACC,WAAZ,CAAyB,IAAzB,EAA8B;AAAE5B,MAAAA,IAAI,EAAG;AAAT,KAA9B;AACD,GArCuB,CAAxB;AAuCA,SAAOE,eAAP;AACD,CA7DD;;AA+DO,MAAM2B,sBAAsB,GAAG,CAA6B;AACjEzC,EAAAA,cADiE;AAEjE0C,EAAAA;AAFiE,CAA7B,KAM1B;AACV,QAAM5B,eAAe,GAAGf,wBAAwB,CAACC,cAAD,CAAhD;AACA0C,EAAAA,YAAY,CAACtC,SAAb,CAAuBU,eAAe,CAAC6B,SAAhB,EAAvB;AACA7B,EAAAA,eAAe,CAAC8B,cAAhB,CAA+BC,IAAI,IAAIA,IAAI,CAACR,QAAL,CAAczB,IAArD;AACAZ,EAAAA,cAAc,CAAC8C,qBAAf,CAAqCJ,YAArC;AACD,CAXM;;;;AAaA,MAAMK,gBAAgB,GAAG,CAA6B;AAC3D/C,EAAAA,cAD2D;AAE3D0C,EAAAA;AAF2D,CAA7B,KAMpB;AACV,QAAM5B,eAAe,GAAGf,wBAAwB,CAACC,cAAD,CAAhD;AACA0C,EAAAA,YAAY,CAACM,YAAb,CAA0BlC,eAA1B;AACA2B,EAAAA,sBAAsB,CAAC;AAAEzC,IAAAA,cAAF;AAAkB0C,IAAAA;AAAlB,GAAD,CAAtB;AACD,CAVM;;;;AAYA,MAAMO,gBAAgB,GAAG,CAA6C;AAC3EjD,EAAAA;AAD2E,CAA7C,KAK9BD,wBAAwB,CAACC,cAAD,CALnB","sourcesContent":["import { SORTABLE_ENUM } from \"./sort\"\nimport { SEARCHABLE_ENUM } from \"./filter\"\nimport {\n  SchemaComposer,\n  InterfaceTypeComposer,\n  ObjectTypeComposer,\n} from \"graphql-compose\"\nimport { IGatsbyResolverContext } from \"../type-definitions\"\nimport { Node } from \"../../..\"\n\nexport const NodeInterfaceFields = [`id`, `parent`, `children`, `internal`]\n\nconst getOrCreateNodeInterface = <TSource, TArgs>(\n  schemaComposer: SchemaComposer<IGatsbyResolverContext<TSource, TArgs>>\n): InterfaceTypeComposer => {\n  // TODO: why is `mediaType` on Internal? Applies only to File!?\n  // `fieldOwners` is an object\n  // Should we drop ignoreType?\n  const internalTC = schemaComposer.getOrCreateOTC(`Internal`, tc => {\n    tc.addFields({\n      content: `String`,\n      contentDigest: `String!`,\n      description: `String`,\n      fieldOwners: [`String`],\n      ignoreType: `Boolean`,\n      mediaType: `String`,\n      owner: `String!`,\n      type: `String!`,\n    })\n    // TODO: Can be removed with graphql-compose 5.11\n    tc.getInputTypeComposer()\n  })\n\n  const nodeInterfaceTC = schemaComposer.getOrCreateIFTC(`Node`, tc => {\n    tc.setDescription(`Node Interface`)\n    tc.addFields({\n      id: `ID!`,\n      parent: {\n        type: `Node`,\n        resolve: (source, _args, context): Node | null => {\n          const { path } = context\n          return context.nodeModel.getNodeById({ id: source.parent }, { path })\n        },\n        extensions: {\n          searchable: SEARCHABLE_ENUM.SEARCHABLE,\n          sortable: SORTABLE_ENUM.SORTABLE,\n          needsResolve: true,\n        },\n      },\n      children: {\n        type: `[Node!]!`,\n        resolve: (source, _args, context): Array<Node> => {\n          const { path } = context\n          return context.nodeModel.getNodesByIds(\n            { ids: source.children },\n            { path }\n          )\n        },\n        extensions: {\n          searchable: SEARCHABLE_ENUM.SEARCHABLE,\n          sortable: SORTABLE_ENUM.SORTABLE,\n          needsResolve: true,\n        },\n      },\n      internal: internalTC.getTypeNonNull(),\n    })\n    // TODO: In Gatsby v2, the NodeInput.id field is of type String, not ID.\n    // Remove this workaround for v3.\n    const nodeInputTC = tc.getInputTypeComposer()\n    nodeInputTC.extendField(`id`, { type: `String` })\n  })\n\n  return nodeInterfaceTC\n}\n\nexport const addNodeInterfaceFields = <TSource = any, TArgs = any>({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<IGatsbyResolverContext<TSource, TArgs>>\n  typeComposer: ObjectTypeComposer\n}): void => {\n  const nodeInterfaceTC = getOrCreateNodeInterface(schemaComposer)\n  typeComposer.addFields(nodeInterfaceTC.getFields())\n  nodeInterfaceTC.setResolveType(node => node.internal.type)\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n}\n\nexport const addNodeInterface = <TSource = any, TArgs = any>({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<IGatsbyResolverContext<TSource, TArgs>>\n  typeComposer: ObjectTypeComposer\n}): void => {\n  const nodeInterfaceTC = getOrCreateNodeInterface(schemaComposer)\n  typeComposer.addInterface(nodeInterfaceTC)\n  addNodeInterfaceFields({ schemaComposer, typeComposer })\n}\n\nexport const getNodeInterface = <TSource = any, TContext = any, TArgs = any>({\n  schemaComposer,\n}: {\n  schemaComposer: SchemaComposer<IGatsbyResolverContext<TSource, TArgs>>\n}): InterfaceTypeComposer<TSource, TContext> =>\n  getOrCreateNodeInterface(schemaComposer)\n"],"file":"node-interface.js"}