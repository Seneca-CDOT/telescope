{"version":3,"sources":["../../src/schema/schema.js"],"names":["_","require","invariant","isSpecifiedScalarType","isIntrospectionType","assertValidName","GraphQLNonNull","GraphQLList","GraphQLObjectType","GraphQLInterfaceType","ObjectTypeComposer","InterfaceTypeComposer","UnionTypeComposer","InputTypeComposer","ScalarTypeComposer","EnumTypeComposer","defineFieldMapToConfig","getNode","getNodesByType","apiRunner","report","addNodeInterfaceFields","overridableBuiltInTypeNames","addInferredType","addInferredTypes","findOne","findManyPaginated","wrappingResolver","defaultResolver","processFieldExtensions","internalExtensionNames","isASTDocument","parseTypeDef","reportParsingError","printTypeDefinitions","buildSchema","schemaComposer","types","typeMapping","fieldExtensions","thirdPartySchemas","printConfig","typeConflictReporter","inferenceMetadata","parentSpan","updateSchemaComposer","schema","rebuildSchemaWithSitePage","typeComposer","getOTC","shouldInfer","hasExtension","getExtension","processTypeComposer","module","exports","activity","phantomActivity","start","addTypes","span","end","config","addSetFieldsOnGraphQLNodeTypeFields","addConvenienceChildrenFields","Promise","all","Array","from","Set","values","map","checkQueryableInterfaces","addThirdPartySchemas","addCustomResolveFunctions","attachTracingResolver","hasInterface","addImplicitConvenienceChildrenFields","determineSearchableFields","addTypeToRootQuery","fieldNames","query","typeName","camelCase","queryAll","convenienceChild","convenienceChildren","forEach","typeOrTypeDef","plugin","parsedTypes","createdFrom","parseTypes","doc","error","type","processAddedType","createTypeComposerFromGatsbyType","getTypeName","checkIsAllowedTypeName","has","get","mergeTypes","name","typeOwner","isOverridableBuiltInType","isSafeMerge","warn","mergeFields","fields","getFields","getInterfaces","iface","addInterface","isNamedTypeComposer","extendExtensions","getExtensions","addExtensions","addAsComposer","getResolveType","setResolveType","node","internal","addSchemaMustHaveType","setExtension","directives","getDirectives","args","noDefaultResolvers","hasField","getFieldType","toString","panic","getFieldNames","fieldName","setFieldExtension","getFieldDirectives","getFieldExtensions","Object","keys","filter","includes","definition","getDirective","defaultValue","undefined","arg","argumentDef","find","value","validate","message","endsWith","kind","GatsbyGraphQLTypeKind","OBJECT","createTemp","interfaces","getIFTC","getType","INPUT_OBJECT","UNION","INTERFACE","ENUM","SCALAR","JSON","stringify","tc","result","nodes","traceId","addNestedFields","schemaQueryType","getQueryType","queryTC","createTempTC","processThirdPartyTypeFields","Query","addFields","getTypeMap","createTC","resetOverriddenThirdPartyTypeFields","getFieldExtension","removeField","field","getField","fieldType","replace","extendField","intermediateSchema","createResolvers","resolvers","ignoreNonexistentTypes","fieldConfig","originalFieldConfig","getFieldConfig","originalTypeName","originalResolver","resolve","fieldTypeName","isArray","stringifyArray","newConfig","source","context","info","defaultFieldResolver","extendFieldExtensions","needsResolve","extensions","dateformat","searchable","SEARCHABLE_ENUM","SEARCHABLE","sortable","SORTABLE_ENUM","SORTABLE","proxy","isEmpty","DEPRECATED_SEARCHABLE","DEPRECATED_SORTABLE","parentTypesToChildren","Map","mimeTypesToChildren","typesHandlingMimeTypes","mimeType","set","add","mimeTypes","many","parentType","children","parent","getAnyTC","child","createChildrenField","createChildField","parentTypes","parentTypeName","childNodesByType","groupChildNodesByType","typeChildren","maxChildCount","maxBy","groupBy","c","g","length","childTypeComposer","childOfExtension","path","nodeModel","getNodesByIds","ids","flatMap","Boolean","sortInputTC","filterInputTC","paginationTC","queryName","queryNamePlural","sort","skip","limit","makeFieldNonNull","definitions","def","parsedType","typeMapper","makeSchemaDef","push","arr","item","Error","ofType","v","parseValue","queryableInterfaces","incorrectTypes","some","t","join","entries","setField"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst {\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  assertValidName,\n  GraphQLNonNull,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n} = require(`graphql`)\nconst {\n  ObjectTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  InputTypeComposer,\n  ScalarTypeComposer,\n  EnumTypeComposer,\n  defineFieldMapToConfig,\n} = require(`graphql-compose`)\nconst { getNode, getNodesByType } = require(`../redux/nodes`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { addNodeInterfaceFields } = require(`./types/node-interface`)\nconst { overridableBuiltInTypeNames } = require(`./types/built-in-types`)\nconst { addInferredType, addInferredTypes } = require(`./infer`)\nconst {\n  findOne,\n  findManyPaginated,\n  wrappingResolver,\n  defaultResolver,\n} = require(`./resolvers`)\nconst {\n  processFieldExtensions,\n  internalExtensionNames,\n} = require(`./extensions`)\nimport { getPagination } from \"./types/pagination\"\nimport { getSortInput, SORTABLE_ENUM } from \"./types/sort\"\nimport { getFilterInput, SEARCHABLE_ENUM } from \"./types/filter\"\nimport { isGatsbyType, GatsbyGraphQLTypeKind } from \"./types/type-builders\"\n\nconst {\n  isASTDocument,\n  parseTypeDef,\n  reportParsingError,\n} = require(`./types/type-defs`)\nimport { clearDerivedTypes } from \"./types/derived-types\"\nconst { printTypeDefinitions } = require(`./print`)\n\nconst buildSchema = async ({\n  schemaComposer,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  printConfig,\n  typeConflictReporter,\n  inferenceMetadata,\n  parentSpan,\n}) => {\n  await updateSchemaComposer({\n    schemaComposer,\n    types,\n    typeMapping,\n    fieldExtensions,\n    thirdPartySchemas,\n    printConfig,\n    typeConflictReporter,\n    inferenceMetadata,\n    parentSpan,\n  })\n  // const { printSchema } = require(`graphql`)\n  const schema = schemaComposer.buildSchema()\n  // console.log(printSchema(schema))\n  return schema\n}\n\nconst rebuildSchemaWithSitePage = async ({\n  schemaComposer,\n  typeMapping,\n  fieldExtensions,\n  typeConflictReporter,\n  inferenceMetadata,\n  parentSpan,\n}) => {\n  const typeComposer = schemaComposer.getOTC(`SitePage`)\n\n  // Clear derived types and fields\n  // they will be re-created in processTypeComposer later\n  clearDerivedTypes({ schemaComposer, typeComposer })\n\n  const shouldInfer =\n    !typeComposer.hasExtension(`infer`) ||\n    typeComposer.getExtension(`infer`) !== false\n  if (shouldInfer) {\n    addInferredType({\n      schemaComposer,\n      typeComposer,\n      typeConflictReporter,\n      typeMapping,\n      inferenceMetadata,\n      parentSpan,\n    })\n  }\n  await processTypeComposer({\n    schemaComposer,\n    typeComposer,\n    fieldExtensions,\n    parentSpan,\n  })\n  return schemaComposer.buildSchema()\n}\n\nmodule.exports = {\n  buildSchema,\n  rebuildSchemaWithSitePage,\n}\n\nconst updateSchemaComposer = async ({\n  schemaComposer,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  printConfig,\n  typeConflictReporter,\n  inferenceMetadata,\n  parentSpan,\n}) => {\n  let activity = report.phantomActivity(`Add explicit types`, {\n    parentSpan: parentSpan,\n  })\n  activity.start()\n  await addTypes({ schemaComposer, parentSpan: activity.span, types })\n  activity.end()\n\n  activity = report.phantomActivity(`Add inferred types`, {\n    parentSpan: parentSpan,\n  })\n  activity.start()\n  await addInferredTypes({\n    schemaComposer,\n    typeConflictReporter,\n    typeMapping,\n    inferenceMetadata,\n    parentSpan: activity.span,\n  })\n  activity.end()\n\n  activity = report.phantomActivity(`Processing types`, {\n    parentSpan: parentSpan,\n  })\n  activity.start()\n  await printTypeDefinitions({\n    config: printConfig,\n    schemaComposer,\n    parentSpan: activity.span,\n  })\n  await addSetFieldsOnGraphQLNodeTypeFields({\n    schemaComposer,\n    parentSpan: activity.span,\n  })\n  await addConvenienceChildrenFields({\n    schemaComposer,\n    parentSpan: activity.span,\n  })\n  await Promise.all(\n    Array.from(new Set(schemaComposer.values())).map(typeComposer =>\n      processTypeComposer({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        parentSpan: activity.span,\n      })\n    )\n  )\n  checkQueryableInterfaces({ schemaComposer, parentSpan: activity.span })\n  await addThirdPartySchemas({\n    schemaComposer,\n    thirdPartySchemas,\n    parentSpan: activity.span,\n  })\n  await addCustomResolveFunctions({ schemaComposer, parentSpan: activity.span })\n  await attachTracingResolver({ schemaComposer, parentSpan: activity.span })\n  activity.end()\n}\n\nconst processTypeComposer = async ({\n  schemaComposer,\n  typeComposer,\n  fieldExtensions,\n  parentSpan,\n}) => {\n  if (typeComposer instanceof ObjectTypeComposer) {\n    await processFieldExtensions({\n      schemaComposer,\n      typeComposer,\n      fieldExtensions,\n      parentSpan,\n    })\n\n    if (typeComposer.hasInterface(`Node`)) {\n      await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })\n      await addImplicitConvenienceChildrenFields({\n        schemaComposer,\n        typeComposer,\n        parentSpan,\n      })\n    }\n    await determineSearchableFields({\n      schemaComposer,\n      typeComposer,\n      parentSpan,\n    })\n\n    if (typeComposer.hasInterface(`Node`)) {\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  } else if (typeComposer instanceof InterfaceTypeComposer) {\n    if (typeComposer.getExtension(`nodeInterface`)) {\n      // We only process field extensions for queryable Node interfaces, so we get\n      // the input args on the root query type, e.g. `formatString` etc. for `dateformat`\n      await processFieldExtensions({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        parentSpan,\n      })\n      await determineSearchableFields({\n        schemaComposer,\n        typeComposer,\n        parentSpan,\n      })\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  }\n}\n\nconst fieldNames = {\n  query: typeName => _.camelCase(typeName),\n  queryAll: typeName => _.camelCase(`all ${typeName}`),\n  convenienceChild: typeName => _.camelCase(`child ${typeName}`),\n  convenienceChildren: typeName => _.camelCase(`children ${typeName}`),\n}\n\nconst addTypes = ({ schemaComposer, types, parentSpan }) => {\n  types.forEach(({ typeOrTypeDef, plugin }) => {\n    if (typeof typeOrTypeDef === `string`) {\n      typeOrTypeDef = parseTypeDef(typeOrTypeDef)\n    }\n    if (isASTDocument(typeOrTypeDef)) {\n      let parsedTypes\n      const createdFrom = `sdl`\n      try {\n        parsedTypes = parseTypes({\n          doc: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          schemaComposer,\n          parentSpan,\n        })\n      } catch (error) {\n        reportParsingError(error)\n        return\n      }\n      parsedTypes.forEach(type => {\n        processAddedType({\n          schemaComposer,\n          type,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      })\n    } else if (isGatsbyType(typeOrTypeDef)) {\n      const type = createTypeComposerFromGatsbyType({\n        schemaComposer,\n        type: typeOrTypeDef,\n        parentSpan,\n      })\n\n      if (type) {\n        const typeName = type.getTypeName()\n        const createdFrom = `typeBuilder`\n        checkIsAllowedTypeName(typeName)\n        if (schemaComposer.has(typeName)) {\n          const typeComposer = schemaComposer.get(typeName)\n          mergeTypes({\n            schemaComposer,\n            typeComposer,\n            type,\n            plugin,\n            createdFrom,\n            parentSpan,\n          })\n        } else {\n          processAddedType({\n            schemaComposer,\n            type,\n            parentSpan,\n            createdFrom,\n            plugin,\n          })\n        }\n      }\n    } else {\n      const typeName = typeOrTypeDef.name\n      const createdFrom = `graphql-js`\n      checkIsAllowedTypeName(typeName)\n      if (schemaComposer.has(typeName)) {\n        const typeComposer = schemaComposer.get(typeName)\n        mergeTypes({\n          schemaComposer,\n          typeComposer,\n          type: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          parentSpan,\n        })\n      } else {\n        processAddedType({\n          schemaComposer,\n          type: typeOrTypeDef,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      }\n    }\n  })\n}\n\nconst mergeTypes = ({\n  schemaComposer,\n  typeComposer,\n  type,\n  plugin,\n  createdFrom,\n  parentSpan,\n}) => {\n  // The merge is considered safe when a user or a plugin owning the type extend this type\n  // TODO: add proper conflicts detection and reporting (on the field level)\n  const typeOwner = typeComposer.getExtension(`plugin`)\n  const isOverridableBuiltInType =\n    !typeOwner && overridableBuiltInTypeNames.has(typeComposer.getTypeName())\n\n  const isSafeMerge =\n    !plugin ||\n    plugin.name === `default-site-plugin` ||\n    plugin.name === typeOwner ||\n    isOverridableBuiltInType\n\n  if (!isSafeMerge) {\n    if (typeOwner) {\n      report.warn(\n        `Plugin \\`${plugin.name}\\` has customized the GraphQL type ` +\n          `\\`${typeComposer.getTypeName()}\\`, which has already been defined ` +\n          `by the plugin \\`${typeOwner}\\`. ` +\n          `This could potentially cause conflicts.`\n      )\n    } else {\n      report.warn(\n        `Plugin \\`${plugin.name}\\` has customized the built-in Gatsby GraphQL type ` +\n          `\\`${typeComposer.getTypeName()}\\`. ` +\n          `This is allowed, but could potentially cause conflicts.`\n      )\n    }\n  }\n\n  if (type instanceof ObjectTypeComposer) {\n    mergeFields({ typeComposer, fields: type.getFields() })\n    type.getInterfaces().forEach(iface => typeComposer.addInterface(iface))\n  } else if (type instanceof InterfaceTypeComposer) {\n    mergeFields({ typeComposer, fields: type.getFields() })\n  } else if (type instanceof GraphQLObjectType) {\n    mergeFields({\n      typeComposer,\n      fields: defineFieldMapToConfig(type.getFields()),\n    })\n    type.getInterfaces().forEach(iface => typeComposer.addInterface(iface))\n  } else if (type instanceof GraphQLInterfaceType) {\n    mergeFields({\n      typeComposer,\n      fields: defineFieldMapToConfig(type.getFields()),\n    })\n  }\n\n  if (isNamedTypeComposer(type)) {\n    typeComposer.extendExtensions(type.getExtensions())\n  }\n\n  addExtensions({ schemaComposer, typeComposer, plugin, createdFrom })\n\n  return true\n}\n\nconst processAddedType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n  createdFrom,\n  plugin,\n}) => {\n  const typeName = schemaComposer.addAsComposer(type)\n  const typeComposer = schemaComposer.get(typeName)\n  if (\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof UnionTypeComposer\n  ) {\n    if (!typeComposer.getResolveType()) {\n      typeComposer.setResolveType(node => node.internal.type)\n    }\n  }\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n\n  addExtensions({ schemaComposer, typeComposer, plugin, createdFrom })\n\n  return typeComposer\n}\n\nconst addExtensions = ({\n  schemaComposer,\n  typeComposer,\n  plugin,\n  createdFrom,\n}) => {\n  typeComposer.setExtension(`createdFrom`, createdFrom)\n  typeComposer.setExtension(`plugin`, plugin ? plugin.name : null)\n\n  if (createdFrom === `sdl`) {\n    const directives = typeComposer.getDirectives()\n    directives.forEach(({ name, args }) => {\n      switch (name) {\n        case `infer`:\n        case `dontInfer`: {\n          typeComposer.setExtension(`infer`, name === `infer`)\n          if (args.noDefaultResolvers != null) {\n            typeComposer.setExtension(\n              `addDefaultResolvers`,\n              !args.noDefaultResolvers\n            )\n          }\n          break\n        }\n        case `mimeTypes`:\n          typeComposer.setExtension(`mimeTypes`, args)\n          break\n        case `childOf`:\n          typeComposer.setExtension(`childOf`, args)\n          break\n        case `nodeInterface`:\n          if (typeComposer instanceof InterfaceTypeComposer) {\n            if (\n              !typeComposer.hasField(`id`) ||\n              typeComposer.getFieldType(`id`).toString() !== `ID!`\n            ) {\n              report.panic(\n                `Interfaces with the \\`nodeInterface\\` extension must have a field ` +\n                  `\\`id\\` of type \\`ID!\\`. Check the type definition of ` +\n                  `\\`${typeComposer.getTypeName()}\\`.`\n              )\n            }\n            typeComposer.setExtension(`nodeInterface`, true)\n          }\n          break\n        default:\n      }\n    })\n  }\n\n  if (\n    typeComposer instanceof ObjectTypeComposer ||\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof InputTypeComposer\n  ) {\n    typeComposer.getFieldNames().forEach(fieldName => {\n      typeComposer.setFieldExtension(fieldName, `createdFrom`, createdFrom)\n      typeComposer.setFieldExtension(\n        fieldName,\n        `plugin`,\n        plugin ? plugin.name : null\n      )\n\n      if (createdFrom === `sdl`) {\n        const directives = typeComposer.getFieldDirectives(fieldName)\n        directives.forEach(({ name, args }) => {\n          typeComposer.setFieldExtension(fieldName, name, args)\n        })\n      }\n\n      // Validate field extension args. `graphql-compose` already checks the\n      // type of directive args in `parseDirectives`, but we want to check\n      // extensions provided with type builders as well. Also, we warn if an\n      // extension option was provided which does not exist in the field\n      // extension definition.\n      const fieldExtensions = typeComposer.getFieldExtensions(fieldName)\n      const typeName = typeComposer.getTypeName()\n      Object.keys(fieldExtensions)\n        .filter(name => !internalExtensionNames.includes(name))\n        .forEach(name => {\n          const args = fieldExtensions[name]\n\n          if (!args || typeof args !== `object`) {\n            report.error(\n              `Field extension arguments must be provided as an object. ` +\n                `Received \"${args}\" on \\`${typeName}.${fieldName}\\`.`\n            )\n            return\n          }\n\n          try {\n            const definition = schemaComposer.getDirective(name)\n\n            // Handle `defaultValue` when not provided as directive\n            definition.args.forEach(({ name, defaultValue }) => {\n              if (args[name] === undefined && defaultValue !== undefined) {\n                args[name] = defaultValue\n              }\n            })\n\n            Object.keys(args).forEach(arg => {\n              const argumentDef = definition.args.find(\n                ({ name }) => name === arg\n              )\n              if (!argumentDef) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has invalid argument \\`${arg}\\`.`\n                )\n                return\n              }\n              const value = args[arg]\n              try {\n                validate(argumentDef.type, value)\n              } catch (error) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has argument \\`${arg}\\` with invalid value \"${value}\". ` +\n                    error.message\n                )\n              }\n            })\n          } catch (error) {\n            report.error(\n              `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                `is not available.`\n            )\n          }\n        })\n    })\n  }\n\n  if (typeComposer.hasExtension(`addDefaultResolvers`)) {\n    report.warn(\n      `Deprecation warning - \"noDefaultResolvers\" is deprecated. In Gatsby 3, ` +\n        `defined fields won't get resolvers, unless explicitly added with a ` +\n        `directive/extension.`\n    )\n  }\n\n  return typeComposer\n}\n\nconst checkIsAllowedTypeName = name => {\n  invariant(\n    name !== `Node`,\n    `The GraphQL type \\`Node\\` is reserved for internal use.`\n  )\n  invariant(\n    !name.endsWith(`FilterInput`) && !name.endsWith(`SortInput`),\n    `GraphQL type names ending with \"FilterInput\" or \"SortInput\" are ` +\n      `reserved for internal use. Please rename \\`${name}\\`.`\n  )\n  invariant(\n    ![`Boolean`, `Date`, `Float`, `ID`, `Int`, `JSON`, `String`].includes(name),\n    `The GraphQL type \\`${name}\\` is reserved for internal use by ` +\n      `built-in scalar types.`\n  )\n  assertValidName(name)\n}\n\nconst createTypeComposerFromGatsbyType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n}) => {\n  switch (type.kind) {\n    case GatsbyGraphQLTypeKind.OBJECT: {\n      return ObjectTypeComposer.createTemp(\n        {\n          ...type.config,\n          interfaces: () => {\n            if (type.config.interfaces) {\n              return type.config.interfaces.map(iface => {\n                if (typeof iface === `string`) {\n                  return schemaComposer.getIFTC(iface).getType()\n                } else {\n                  return iface\n                }\n              })\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INPUT_OBJECT: {\n      return InputTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.UNION: {\n      return UnionTypeComposer.createTemp(\n        {\n          ...type.config,\n          types: () => {\n            if (type.config.types) {\n              return type.config.types.map(typeName =>\n                schemaComposer.getOTC(typeName).getType()\n              )\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INTERFACE: {\n      return InterfaceTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.ENUM: {\n      return EnumTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.SCALAR: {\n      return ScalarTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    default: {\n      report.warn(`Illegal type definition: ${JSON.stringify(type.config)}`)\n      return null\n    }\n  }\n}\n\nconst addSetFieldsOnGraphQLNodeTypeFields = ({ schemaComposer, parentSpan }) =>\n  Promise.all(\n    Array.from(schemaComposer.values()).map(async tc => {\n      if (tc instanceof ObjectTypeComposer && tc.hasInterface(`Node`)) {\n        const typeName = tc.getTypeName()\n        const result = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n          type: {\n            name: typeName,\n            nodes: getNodesByType(typeName),\n          },\n          traceId: `initial-setFieldsOnGraphQLNodeType`,\n          parentSpan,\n        })\n        if (result) {\n          // NOTE: `setFieldsOnGraphQLNodeType` only allows setting\n          // nested fields with a path as property name, i.e.\n          // `{ 'frontmatter.published': 'Boolean' }`, but not in the form\n          // `{ frontmatter: { published: 'Boolean' }}`\n          result.forEach(fields => tc.addNestedFields(fields))\n        }\n      }\n    })\n  )\n\nconst addThirdPartySchemas = ({\n  schemaComposer,\n  thirdPartySchemas,\n  parentSpan,\n}) => {\n  thirdPartySchemas.forEach(schema => {\n    const schemaQueryType = schema.getQueryType()\n    const queryTC = schemaComposer.createTempTC(schemaQueryType)\n    processThirdPartyTypeFields({ typeComposer: queryTC, schemaQueryType })\n    schemaComposer.Query.addFields(queryTC.getFields())\n\n    // Explicitly add the third-party schema's types, so they can be targeted\n    // in `createResolvers` API.\n    const types = schema.getTypeMap()\n    Object.keys(types).forEach(typeName => {\n      const type = types[typeName]\n      if (\n        type !== schemaQueryType &&\n        !isSpecifiedScalarType(type) &&\n        !isIntrospectionType(type) &&\n        type.name !== `Date` &&\n        type.name !== `JSON`\n      ) {\n        const typeComposer = schemaComposer.createTC(type)\n        if (\n          typeComposer instanceof ObjectTypeComposer ||\n          typeComposer instanceof InterfaceTypeComposer\n        ) {\n          processThirdPartyTypeFields({ typeComposer, schemaQueryType })\n        }\n        typeComposer.setExtension(`createdFrom`, `thirdPartySchema`)\n        schemaComposer.addSchemaMustHaveType(typeComposer)\n      }\n    })\n  })\n}\n\nconst resetOverriddenThirdPartyTypeFields = ({ typeComposer }) => {\n  // The problem: createResolvers API mutates third party schema instance.\n  //   For example it can add a new field referencing a type from our main schema\n  //   Then if we rebuild the schema this old type instance will sneak into\n  //   the new schema and produce the famous error:\n  //   \"Schema must contain uniquely named types but contains multiple types named X\"\n  // This function only affects schema rebuilding pathway.\n  //   It cleans up artifacts created by the `createResolvers` API of the previous build\n  //   so that we return the third party schema to its initial state (hence can safely re-add)\n  // TODO: the right way to fix this would be not to mutate the third party schema in\n  //   the first place. But unfortunately mutation happens in the `graphql-compose`\n  //   and we don't have an easy way to avoid it without major rework\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const createdFrom = typeComposer.getFieldExtension(fieldName, `createdFrom`)\n    if (createdFrom === `createResolvers`) {\n      typeComposer.removeField(fieldName)\n      return\n    }\n    const config = typeComposer.getFieldExtension(\n      fieldName,\n      `originalFieldConfig`\n    )\n    if (config) {\n      typeComposer.removeField(fieldName)\n      typeComposer.addFields({\n        [fieldName]: config,\n      })\n    }\n  })\n}\n\nconst processThirdPartyTypeFields = ({ typeComposer, schemaQueryType }) => {\n  resetOverriddenThirdPartyTypeFields({ typeComposer })\n\n  // Fix for types that refer to Query. Thanks Relay Classic!\n  typeComposer.getFieldNames().forEach(fieldName => {\n    // Remove customization that we could have added via `createResolvers`\n    // to make it work with schema rebuilding\n    const field = typeComposer.getField(fieldName)\n    const fieldType = field.type.toString()\n    if (fieldType.replace(/[[\\]!]/g, ``) === schemaQueryType.name) {\n      typeComposer.extendField(fieldName, {\n        type: fieldType.replace(schemaQueryType.name, `Query`),\n      })\n    }\n  })\n}\n\nconst addCustomResolveFunctions = async ({ schemaComposer, parentSpan }) => {\n  const intermediateSchema = schemaComposer.buildSchema()\n  const createResolvers = (\n    resolvers,\n    { ignoreNonexistentTypes = false } = {}\n  ) => {\n    Object.keys(resolvers).forEach(typeName => {\n      const fields = resolvers[typeName]\n      if (schemaComposer.has(typeName)) {\n        const tc = schemaComposer.getOTC(typeName)\n        Object.keys(fields).forEach(fieldName => {\n          const fieldConfig = fields[fieldName]\n          if (tc.hasField(fieldName)) {\n            const originalFieldConfig = tc.getFieldConfig(fieldName)\n            const originalTypeName = originalFieldConfig.type.toString()\n            const originalResolver = originalFieldConfig.resolve\n            let fieldTypeName\n            if (fieldConfig.type) {\n              fieldTypeName = Array.isArray(fieldConfig.type)\n                ? stringifyArray(fieldConfig.type)\n                : fieldConfig.type.toString()\n            }\n\n            if (\n              !fieldTypeName ||\n              fieldTypeName.replace(/!/g, ``) ===\n                originalTypeName.replace(/!/g, ``) ||\n              tc.getExtension(`createdFrom`) === `thirdPartySchema`\n            ) {\n              const newConfig = {}\n              if (fieldConfig.type) {\n                newConfig.type = fieldConfig.type\n              }\n              if (fieldConfig.args) {\n                newConfig.args = fieldConfig.args\n              }\n              if (fieldConfig.resolve) {\n                newConfig.resolve = (source, args, context, info) =>\n                  fieldConfig.resolve(source, args, context, {\n                    ...info,\n                    originalResolver:\n                      originalResolver || context.defaultFieldResolver,\n                  })\n                tc.extendFieldExtensions(fieldName, {\n                  needsResolve: true,\n                })\n              }\n              tc.extendField(fieldName, newConfig)\n\n              // See resetOverriddenThirdPartyTypeFields for explanation\n              if (tc.getExtension(`createdFrom`) === `thirdPartySchema`) {\n                tc.setFieldExtension(\n                  fieldName,\n                  `originalFieldConfig`,\n                  originalFieldConfig\n                )\n              }\n            } else if (fieldTypeName) {\n              report.warn(\n                `\\`createResolvers\\` passed resolvers for field ` +\n                  `\\`${typeName}.${fieldName}\\` with type \\`${fieldTypeName}\\`. ` +\n                  `Such a field with type \\`${originalTypeName}\\` already exists ` +\n                  `on the type. Use \\`createTypes\\` to override type fields.`\n              )\n            }\n          } else {\n            tc.addFields({\n              [fieldName]: fieldConfig,\n            })\n            // See resetOverriddenThirdPartyTypeFields for explanation\n            tc.setFieldExtension(fieldName, `createdFrom`, `createResolvers`)\n          }\n        })\n      } else if (!ignoreNonexistentTypes) {\n        report.warn(\n          `\\`createResolvers\\` passed resolvers for type \\`${typeName}\\` that ` +\n            `doesn't exist in the schema. Use \\`createTypes\\` to add the type ` +\n            `before adding resolvers.`\n        )\n      }\n    })\n  }\n  await apiRunner(`createResolvers`, {\n    intermediateSchema,\n    createResolvers,\n    traceId: `initial-createResolvers`,\n    parentSpan,\n  })\n}\n\nfunction attachTracingResolver({ schemaComposer }) {\n  schemaComposer.forEach(typeComposer => {\n    if (\n      typeComposer instanceof ObjectTypeComposer ||\n      typeComposer instanceof InterfaceTypeComposer\n    ) {\n      typeComposer.getFieldNames().forEach(fieldName => {\n        const field = typeComposer.getField(fieldName)\n        typeComposer.extendField(fieldName, {\n          resolve: field.resolve\n            ? wrappingResolver(field.resolve)\n            : defaultResolver,\n        })\n      })\n    }\n  })\n}\n\nconst determineSearchableFields = ({ schemaComposer, typeComposer }) => {\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const field = typeComposer.getField(fieldName)\n    const extensions = typeComposer.getFieldExtensions(fieldName)\n    if (field.resolve) {\n      if (extensions.dateformat) {\n        typeComposer.extendFieldExtensions(fieldName, {\n          searchable: SEARCHABLE_ENUM.SEARCHABLE,\n          sortable: SORTABLE_ENUM.SORTABLE,\n          needsResolve: extensions.proxy ? true : false,\n        })\n      } else if (!_.isEmpty(field.args)) {\n        typeComposer.extendFieldExtensions(fieldName, {\n          searchable: SEARCHABLE_ENUM.DEPRECATED_SEARCHABLE,\n          sortable: SORTABLE_ENUM.DEPRECATED_SORTABLE,\n          needsResolve: true,\n        })\n      } else {\n        typeComposer.extendFieldExtensions(fieldName, {\n          searchable: SEARCHABLE_ENUM.SEARCHABLE,\n          sortable: SORTABLE_ENUM.SORTABLE,\n          needsResolve: true,\n        })\n      }\n    } else {\n      typeComposer.extendFieldExtensions(fieldName, {\n        searchable: SEARCHABLE_ENUM.SEARCHABLE,\n        sortable: SORTABLE_ENUM.SORTABLE,\n        needsResolve: false,\n      })\n    }\n  })\n}\n\nconst addConvenienceChildrenFields = ({ schemaComposer }) => {\n  const parentTypesToChildren = new Map()\n  const mimeTypesToChildren = new Map()\n  const typesHandlingMimeTypes = new Map()\n\n  schemaComposer.forEach(type => {\n    if (\n      (type instanceof ObjectTypeComposer ||\n        type instanceof InterfaceTypeComposer) &&\n      type.hasExtension(`mimeTypes`)\n    ) {\n      const { types } = type.getExtension(`mimeTypes`)\n      new Set(types).forEach(mimeType => {\n        if (!typesHandlingMimeTypes.has(mimeType)) {\n          typesHandlingMimeTypes.set(mimeType, new Set())\n        }\n        typesHandlingMimeTypes.get(mimeType).add(type)\n      })\n    }\n\n    if (\n      (type instanceof ObjectTypeComposer ||\n        type instanceof InterfaceTypeComposer) &&\n      type.hasExtension(`childOf`)\n    ) {\n      if (type instanceof ObjectTypeComposer && !type.hasInterface(`Node`)) {\n        report.error(\n          `The \\`childOf\\` extension can only be used on types that implement the \\`Node\\` interface.\\n` +\n            `Check the type definition of \\`${type.getTypeName()}\\`.`\n        )\n        return\n      }\n      if (\n        type instanceof InterfaceTypeComposer &&\n        !type.hasExtension(`nodeInterface`)\n      ) {\n        report.error(\n          `The \\`childOf\\` extension can only be used on interface types that ` +\n            `have the \\`@nodeInterface\\` extension.\\n` +\n            `Check the type definition of \\`${type.getTypeName()}\\`.`\n        )\n        return\n      }\n\n      const { types, mimeTypes, many } = type.getExtension(`childOf`)\n      new Set(types).forEach(parentType => {\n        if (!parentTypesToChildren.has(parentType)) {\n          parentTypesToChildren.set(parentType, new Map())\n        }\n        parentTypesToChildren.get(parentType).set(type, many)\n      })\n      new Set(mimeTypes).forEach(mimeType => {\n        if (!mimeTypesToChildren.has(mimeType)) {\n          mimeTypesToChildren.set(mimeType, new Map())\n        }\n        mimeTypesToChildren.get(mimeType).set(type, many)\n      })\n    }\n  })\n\n  parentTypesToChildren.forEach((children, parent) => {\n    if (!schemaComposer.has(parent)) return\n    const typeComposer = schemaComposer.getAnyTC(parent)\n    if (\n      typeComposer instanceof InterfaceTypeComposer &&\n      !typeComposer.hasExtension(`nodeInterface`)\n    ) {\n      report.error(\n        `With the \\`childOf\\` extension, children fields can only be added to ` +\n          `interfaces which have the \\`@nodeInterface\\` extension.\\n` +\n          `Check the type definition of \\`${typeComposer.getTypeName()}\\`.`\n      )\n      return\n    }\n    children.forEach((many, child) => {\n      if (many) {\n        typeComposer.addFields(createChildrenField(child.getTypeName()))\n      } else {\n        typeComposer.addFields(createChildField(child.getTypeName()))\n      }\n    })\n  })\n\n  mimeTypesToChildren.forEach((children, mimeType) => {\n    const parentTypes = typesHandlingMimeTypes.get(mimeType)\n    if (parentTypes) {\n      parentTypes.forEach(typeComposer => {\n        if (\n          typeComposer instanceof InterfaceTypeComposer &&\n          !typeComposer.hasExtension(`nodeInterface`)\n        ) {\n          report.error(\n            `With the \\`childOf\\` extension, children fields can only be added to ` +\n              `interfaces which have the \\`@nodeInterface\\` extension.\\n` +\n              `Check the type definition of \\`${typeComposer.getTypeName()}\\`.`\n          )\n          return\n        }\n        children.forEach((many, child) => {\n          if (many) {\n            typeComposer.addFields(createChildrenField(child.getTypeName()))\n          } else {\n            typeComposer.addFields(createChildField(child.getTypeName()))\n          }\n        })\n      })\n    }\n  })\n}\n\nconst addImplicitConvenienceChildrenFields = ({\n  schemaComposer,\n  typeComposer,\n}) => {\n  const shouldInfer = typeComposer.getExtension(`infer`)\n  // In Gatsby v3, when `@dontInfer` is set, children fields will not be\n  // created for parent-child relations set by plugins with\n  // `createParentChildLink`. With `@dontInfer`, only parent-child\n  // relations explicitly set with the `childOf` extension will be added.\n  // if (shouldInfer === false) return\n\n  const parentTypeName = typeComposer.getTypeName()\n  const nodes = getNodesByType(parentTypeName)\n\n  const childNodesByType = groupChildNodesByType({ nodes })\n\n  Object.keys(childNodesByType).forEach(typeName => {\n    const typeChildren = childNodesByType[typeName]\n    const maxChildCount = _.maxBy(\n      _.values(_.groupBy(typeChildren, c => c.parent)),\n      g => g.length\n    ).length\n\n    // Adding children fields to types with the `@dontInfer` extension is deprecated\n    if (shouldInfer === false) {\n      const childTypeComposer = schemaComposer.getAnyTC(typeName)\n      const childOfExtension = childTypeComposer.getExtension(`childOf`)\n      const many = maxChildCount > 1\n\n      // Only warn when the parent-child relation has not been explicitly set with\n      if (\n        !childOfExtension ||\n        !childOfExtension.types.includes(parentTypeName) ||\n        !childOfExtension.many === many\n      ) {\n        const fieldName = many\n          ? fieldNames.convenienceChildren(typeName)\n          : fieldNames.convenienceChild(typeName)\n        report.warn(\n          `The type \\`${parentTypeName}\\` does not explicitly define ` +\n            `the field \\`${fieldName}\\`.\\n` +\n            `On types with the \\`@dontInfer\\` directive, or with the \\`infer\\` ` +\n            `extension set to \\`false\\`, automatically adding fields for ` +\n            `children types is deprecated.\\n` +\n            `In Gatsby v3, only children fields explicitly set with the ` +\n            `\\`childOf\\` extension will be added.\\n`\n        )\n      }\n    }\n\n    if (maxChildCount > 1) {\n      typeComposer.addFields(createChildrenField(typeName))\n    } else {\n      typeComposer.addFields(createChildField(typeName))\n    }\n  })\n}\n\nconst createChildrenField = typeName => {\n  return {\n    [fieldNames.convenienceChildren(typeName)]: {\n      type: () => [typeName],\n      resolve(source, args, context) {\n        const { path } = context\n        return context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n      },\n    },\n  }\n}\n\nconst createChildField = typeName => {\n  return {\n    [fieldNames.convenienceChild(typeName)]: {\n      type: () => typeName,\n      async resolve(source, args, context) {\n        const { path } = context\n        const result = await context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n        if (result && result.length > 0) {\n          return result[0]\n        } else {\n          return null\n        }\n      },\n    },\n  }\n}\n\nconst groupChildNodesByType = ({ nodes }) =>\n  _(nodes)\n    .flatMap(node => (node.children || []).map(getNode).filter(Boolean))\n    .groupBy(node => (node.internal ? node.internal.type : undefined))\n    .value()\n\nconst addTypeToRootQuery = ({ schemaComposer, typeComposer }) => {\n  const sortInputTC = getSortInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const filterInputTC = getFilterInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const paginationTC = getPagination({\n    schemaComposer,\n    typeComposer,\n  })\n\n  const typeName = typeComposer.getTypeName()\n  // not strictly correctly, result is `npmPackage` and `allNpmPackage` from type `NPMPackage`\n  const queryName = fieldNames.query(typeName)\n  const queryNamePlural = fieldNames.queryAll(typeName)\n\n  schemaComposer.Query.addFields({\n    [queryName]: {\n      type: typeComposer,\n      args: {\n        ...filterInputTC.getFields(),\n      },\n      resolve: findOne(typeName),\n    },\n    [queryNamePlural]: {\n      type: paginationTC,\n      args: {\n        filter: filterInputTC,\n        sort: sortInputTC,\n        skip: `Int`,\n        limit: `Int`,\n      },\n      resolve: findManyPaginated(typeName),\n    },\n  }).makeFieldNonNull(queryNamePlural)\n}\n\nconst parseTypes = ({\n  doc,\n  plugin,\n  createdFrom,\n  schemaComposer,\n  parentSpan,\n}) => {\n  const types = []\n  doc.definitions.forEach(def => {\n    const name = def.name.value\n    checkIsAllowedTypeName(name)\n\n    if (schemaComposer.has(name)) {\n      // We don't check if ast.kind matches composer type, but rely\n      // that this will throw when something is wrong and get\n      // reported by `reportParsingError`.\n\n      // Keep the original type composer around\n      const typeComposer = schemaComposer.get(name)\n\n      // After this, the parsed type composer will be registered as the composer\n      // handling the type name\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n\n      // Merge the parsed type with the original\n      mergeTypes({\n        schemaComposer,\n        typeComposer,\n        type: parsedType,\n        plugin,\n        createdFrom,\n        parentSpan,\n      })\n\n      // Set the original type composer (with the merged fields added)\n      // as the correct composer for the type name\n      schemaComposer.typeMapper.set(typeComposer.getTypeName(), typeComposer)\n    } else {\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n      types.push(parsedType)\n    }\n  })\n  return types\n}\n\nconst stringifyArray = arr =>\n  `[${arr.map(item =>\n    Array.isArray(item) ? stringifyArray(item) : item.toString()\n  )}]`\n\n// TODO: Import this directly from graphql-compose once we update to v7\nconst isNamedTypeComposer = type =>\n  type instanceof ObjectTypeComposer ||\n  type instanceof InputTypeComposer ||\n  type instanceof ScalarTypeComposer ||\n  type instanceof EnumTypeComposer ||\n  type instanceof InterfaceTypeComposer ||\n  type instanceof UnionTypeComposer\n\nconst validate = (type, value) => {\n  if (type instanceof GraphQLNonNull) {\n    if (value == null) {\n      throw new Error(`Expected non-null field value.`)\n    }\n    return validate(type.ofType, value)\n  } else if (type instanceof GraphQLList) {\n    if (!Array.isArray(value)) {\n      throw new Error(`Expected array field value.`)\n    }\n    return value.map(v => validate(type.ofType, v))\n  } else {\n    return type.parseValue(value)\n  }\n}\n\nconst checkQueryableInterfaces = ({ schemaComposer }) => {\n  const queryableInterfaces = new Set()\n  schemaComposer.forEach(type => {\n    if (\n      type instanceof InterfaceTypeComposer &&\n      type.getExtension(`nodeInterface`)\n    ) {\n      queryableInterfaces.add(type.getTypeName())\n    }\n  })\n  const incorrectTypes = []\n  schemaComposer.forEach(type => {\n    if (type instanceof ObjectTypeComposer) {\n      const interfaces = type.getInterfaces()\n      if (\n        interfaces.some(iface => queryableInterfaces.has(iface.name)) &&\n        !type.hasInterface(`Node`)\n      ) {\n        incorrectTypes.push(type.getTypeName())\n      }\n    }\n  })\n  if (incorrectTypes.length) {\n    report.panic(\n      `Interfaces with the \\`nodeInterface\\` extension must only be ` +\n        `implemented by types which also implement the \\`Node\\` ` +\n        `interface. Check the type definition of ` +\n        `${incorrectTypes.map(t => `\\`${t}\\``).join(`, `)}.`\n    )\n  }\n}\n\nconst mergeFields = ({ typeComposer, fields }) =>\n  Object.entries(fields).forEach(([fieldName, fieldConfig]) => {\n    if (typeComposer.hasField(fieldName)) {\n      typeComposer.extendField(fieldName, fieldConfig)\n    } else {\n      typeComposer.setField(fieldName, fieldConfig)\n    }\n  })\n"],"file":"schema.js"}