{"version":3,"sources":["../../src/utils/telemetry-server.ts"],"names":["ROUTES","trackEvent","trackCli","trackError","app","use","get","req","res","set","send","Object","keys","map","route","join","post","bodyParser","json","body","Array","isArray","status","error","err","console","message","startTelemetryServer","port","listen"],"mappings":";;;;;;;AAOA;;AACA;;AACA;;AACA;;AAVA;;;;;;;AAiBA,4CAAuB,cAAvB,E,CAEA;AACA;;AACA,MAAMA,MAAM,GAAG;AACbC,EAAAA,UAAU,EAAEC,yBADC;AAEbC,EAAAA,UAAU,EAAVA;AAFa,CAAf;AAKA,MAAMC,GAAG,GAAG,uBAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,oBAAR,E,CAEA;;AACAD,GAAG,CAACE,GAAJ,CAAS,GAAT,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,EAAAA,GAAG,CAACC,GAAJ,CAAS,cAAT,EAAyB,WAAzB;AACAD,EAAAA,GAAG,CAACE,IAAJ,CACG;QACGC,MAAM,CAACC,IAAP,CAAYZ,MAAZ,EACCa,GADD,CACKC,KAAK,IAAK,iBAAgBA,KAAM,MAAKA,KAAM,WADhD,EAECC,IAFD,CAEO,IAFP,CAEY;UAJlB;AAOD,CATD;AAWAJ,MAAM,CAACC,IAAP,CAAYZ,MAAZ,EAAoBa,GAApB,CAAwBC,KAAK,IAAI;AAC/BV,EAAAA,GAAG,CAACY,IAAJ,CAAU,IAAGF,KAAM,EAAnB,EAAsBG,oBAAWC,IAAX,EAAtB,EAAyC,CAACX,GAAD,EAAMC,GAAN,KAAc;AACrD,QAAI,CAACD,GAAG,CAACY,IAAL,IAAa,CAACC,KAAK,CAACC,OAAN,CAAcd,GAAG,CAACY,IAAlB,CAAlB,EAA2C;AACzCX,MAAAA,GAAG,CAACU,IAAJ,CAAS;AACPI,QAAAA,MAAM,EAAG,OADF;AAEPC,QAAAA,KAAK,EAAG;AAFD,OAAT;AAIA;AACD;;AAED,QAAI;AACFvB,MAAAA,MAAM,CAACc,KAAD,CAAN,CAAc,GAAGP,GAAG,CAACY,IAArB;AACD,KAFD,CAEE,OAAOK,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACF,KAAR,CAAcC,GAAd;AACAhB,MAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEI,QAAAA,MAAM,EAAG,OAAX;AAAmBC,QAAAA,KAAK,EAAEC,GAAG,CAACE;AAA9B,OAAT;AACA;AACD;;AAEDlB,IAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEI,MAAAA,MAAM,EAAG;AAAX,KAAT;AACD,GAlBD;AAmBD,CApBD;;AAsBe,SAASK,oBAAT,CAA8BC,IAA9B,EAAkD;AAC/D;AACAxB,EAAAA,GAAG,CAACyB,MAAJ,CAAWD,IAAX;AACD","sourcesContent":["/*\n * This exposes gatsby-telemetry functions over HTTP. POST an array of arguments to the path.\n * For example:\n * curl -X POST http://localhost:2345/setVersion\n *   -H \"Content-Type: application/json\"\n *   -d \"[\\\"1.2.3\\\"]\"\n */\nimport express from \"express\"\nimport bodyParser from \"body-parser\"\nimport cors from \"cors\"\nimport {\n  setDefaultComponentId,\n  trackCli,\n  trackError,\n  startBackgroundUpdate,\n} from \"gatsby-telemetry\"\n\nsetDefaultComponentId(`gatsby-admin`)\n\n// These routes will exist in the API at the keys, e.g.\n// http://localhost:1234/trackEvent\nconst ROUTES = {\n  trackEvent: trackCli,\n  trackError,\n}\n\nconst app = express()\n\napp.use(cors())\n\n// Overview over all possible routes at /\napp.get(`/`, (req, res) => {\n  res.set(`Content-Type`, `text/html`)\n  res.send(\n    `<ul>\n      ${Object.keys(ROUTES)\n        .map(route => `<li><a href=\"/${route}\">/${route}</a></li>`)\n        .join(`\\n`)}\n    </ul>`\n  )\n})\n\nObject.keys(ROUTES).map(route => {\n  app.post(`/${route}`, bodyParser.json(), (req, res) => {\n    if (!req.body || !Array.isArray(req.body)) {\n      res.json({\n        status: `error`,\n        error: `Please provide a body array with the arguments for the function.`,\n      })\n      return\n    }\n\n    try {\n      ROUTES[route](...req.body)\n    } catch (err) {\n      console.error(err)\n      res.json({ status: `error`, error: err.message })\n      return\n    }\n\n    res.json({ status: `success` })\n  })\n})\n\nexport default function startTelemetryServer(port: number): void {\n  startBackgroundUpdate()\n  app.listen(port)\n}\n"],"file":"telemetry-server.js"}