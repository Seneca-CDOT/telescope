{"version":3,"sources":["../../src/utils/babel-loader-helpers.js"],"names":["path","require","_","loadCachedConfig","pluginBabelConfig","stages","test","plugins","presets","process","env","NODE_ENV","join","cwd","getCustomOptions","stage","options","prepareOptions","babel","resolve","reactRuntime","requiredPlugins","createConfigItem","staticQueryDir","type","requiredPresets","push","GATSBY_HOT_LOADER","fallbackPresets","reduxPlugins","reduxPresets","forEach","plugin","name","preset","mergeConfigItemOptions","items","itemToMerge","index","findIndex","i","file","resolved","merge","exports"],"mappings":"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","sourcesContent":["const path = require(`path`)\nconst _ = require(`lodash`)\n\nconst loadCachedConfig = () => {\n  let pluginBabelConfig = {\n    stages: {\n      test: { plugins: [], presets: [] },\n    },\n  }\n  if (process.env.NODE_ENV !== `test`) {\n    pluginBabelConfig = require(path.join(\n      process.cwd(),\n      `./.cache/babelState.json`\n    ))\n  }\n  return pluginBabelConfig\n}\n\nconst getCustomOptions = stage => {\n  const pluginBabelConfig = loadCachedConfig()\n  return pluginBabelConfig.stages[stage].options\n}\n\nconst prepareOptions = (babel, options = {}, resolve = require.resolve) => {\n  const pluginBabelConfig = loadCachedConfig()\n\n  const { stage, reactRuntime } = options\n\n  // Required plugins/presets\n  const requiredPlugins = [\n    babel.createConfigItem(\n      [\n        resolve(`babel-plugin-remove-graphql-queries`),\n        { stage, staticQueryDir: `page-data/sq/d` },\n      ],\n      {\n        type: `plugin`,\n      }\n    ),\n  ]\n  const requiredPresets = []\n\n  // Stage specific plugins to add\n  if (stage === `build-html` || stage === `develop-html`) {\n    requiredPlugins.push(\n      babel.createConfigItem([resolve(`babel-plugin-dynamic-import-node`)], {\n        type: `plugin`,\n      })\n    )\n  }\n\n  // TODO: Remove entire block when we make fast-refresh the default\n  if (stage === `develop` && process.env.GATSBY_HOT_LOADER !== `fast-refresh`) {\n    requiredPlugins.push(\n      babel.createConfigItem([resolve(`react-hot-loader/babel`)], {\n        type: `plugin`,\n      })\n    )\n  }\n\n  // Fallback preset\n  const fallbackPresets = []\n\n  fallbackPresets.push(\n    babel.createConfigItem(\n      [\n        resolve(`babel-preset-gatsby`),\n        {\n          stage,\n          reactRuntime,\n        },\n      ],\n      {\n        type: `preset`,\n      }\n    )\n  )\n\n  // Go through babel state and create config items for presets/plugins from.\n  const reduxPlugins = []\n  const reduxPresets = []\n  pluginBabelConfig.stages[stage].plugins.forEach(plugin => {\n    reduxPlugins.push(\n      babel.createConfigItem([resolve(plugin.name), plugin.options], {\n        name: plugin.name,\n        type: `plugin`,\n      })\n    )\n  })\n  pluginBabelConfig.stages[stage].presets.forEach(preset => {\n    reduxPresets.push(\n      babel.createConfigItem([resolve(preset.name), preset.options], {\n        name: preset.name,\n        type: `preset`,\n      })\n    )\n  })\n\n  return [\n    reduxPresets,\n    reduxPlugins,\n    requiredPresets,\n    requiredPlugins,\n    fallbackPresets,\n  ]\n}\n\nconst mergeConfigItemOptions = ({ items, itemToMerge, type, babel }) => {\n  const index = _.findIndex(\n    items,\n    i => i.file.resolved === itemToMerge.file.resolved\n  )\n\n  // If this exist, merge the options, otherwise, add it to the array\n  if (index !== -1) {\n    items[index] = babel.createConfigItem(\n      [\n        itemToMerge.file.resolved,\n        _.merge({}, items[index].options, itemToMerge.options),\n      ],\n      {\n        type,\n      }\n    )\n  } else {\n    items.push(itemToMerge)\n  }\n\n  return items\n}\n\nexports.getCustomOptions = getCustomOptions\n\n// Export helper functions for testing\nexports.prepareOptions = prepareOptions\nexports.mergeConfigItemOptions = mergeConfigItemOptions\n"],"file":"babel-loader-helpers.js"}