{"version":3,"sources":["../../src/utils/js-chunk-names.ts"],"names":["replaceUnifiedRoutesKeys","kebabedName","filePath","newString","split","path","sep","forEach","part","match","exec","replace","generateComponentChunkName","componentPath","program","store","getState","directory","name","relative"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,wBAAT,CACEC,WADF,EAEEC,QAFF,EAGU;AACR,MAAIC,SAAS,GAAGF,WAAhB;AAEAC,EAAAA,QAAQ,CAACE,KAAT,CAAeC,cAAKC,GAApB,EAAyBC,OAAzB,CAAiCC,IAAI,IAAI;AACvC,QAAIA,IAAI,CAAC,CAAD,CAAJ,KAAa,GAAb,IAAmBA,IAAI,CAAC,CAAD,CAAJ,KAAa,GAApC,EAAwC;AACtC,YAAMC,KAAK,GAAG,sBAAsBC,IAAtB,CAA2BF,IAA3B,CAAd;AACAL,MAAAA,SAAS,GAAGA,SAAS,CAACQ,OAAV,CACT,IAAGF,KAAK,CAAE,CAAF,CAAL,IAAaA,KAAK,CAAE,CAAF,CAAK,GADjB,EAET,IAAGA,KAAK,CAAE,CAAF,CAAK,GAFJ,CAAZ;AAID;AACF,GARD;AAUA,SAAON,SAAP;AACD;;AAEM,SAASS,0BAAT,CAAoCC,aAApC,EAAmE;AACxE,QAAM;AAAEC,IAAAA;AAAF,MAAcC,aAAMC,QAAN,EAApB;;AACA,QAAMC,SAAS,GAAG,CAAAH,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEG,SAAT,KAAuB,GAAzC;;AACA,QAAMC,IAAI,GAAGb,cAAKc,QAAL,CAAcF,SAAd,EAAyBJ,aAAzB,CAAb;;AAEA,SAAQ,eAAcb,wBAAwB,CAAC,uBAAUkB,IAAV,CAAD,EAAkBA,IAAlB,CAAwB,EAAtE;AACD","sourcesContent":["import { kebabCase } from \"lodash\"\nimport path from \"path\"\nimport { store } from \"../redux\"\n\n// unified routes adds support for files with [] and {},\n// the problem with our generateComponentChunkName is that when you\n// call kebabCase, is strips off characters like that. This means\n// that when you have a app with this sort of setup, the resolutions fail\n//\n// src/pages/products/{id}.js (collection route)\n// src/pages/products/[...id].js (should render when a non-matched id is passed in)\n//\n// without this function, what happens is that all visits to /products/__ resolve to only one\n// of these because the componentChunkName ends up being duplicate. This function ensures that\n// the {} and [] are kept in the componentChunkName. Also there are tests for this.\nfunction replaceUnifiedRoutesKeys(\n  kebabedName: string,\n  filePath: string\n): string {\n  let newString = kebabedName\n\n  filePath.split(path.sep).forEach(part => {\n    if (part[0] === `[` || part[0] === `{`) {\n      const match = /(\\[(.*)\\]|\\{(.*)\\})/.exec(part)\n      newString = newString.replace(\n        `-${match![2] || match![3]}-`,\n        `-${match![0]}-`\n      )\n    }\n  })\n\n  return newString\n}\n\nexport function generateComponentChunkName(componentPath: string): string {\n  const { program } = store.getState()\n  const directory = program?.directory || `/`\n  const name = path.relative(directory, componentPath)\n\n  return `component---${replaceUnifiedRoutesKeys(kebabCase(name), name)}`\n}\n"],"file":"js-chunk-names.js"}