{"version":3,"sources":["../../src/utils/test-require-error.ts"],"names":["testRequireError","moduleName","err","code","pnpCode","regex","RegExp","replace","firstLine","toString","split","test"],"mappings":";;;;;AAAA;AACA;AACO,MAAMA,gBAAgB,GAAG,CAACC,UAAD,EAAqBC,GAArB,KAA2C;AACzE;AACA;AACA,MACEA,GAAG,CAACC,IAAJ,KAAc,kCAAd,IACAD,GAAG,CAACE,OAAJ,KAAiB,kCAFnB,EAGE;AACA,WAAO,IAAP;AACD;;AACD,QAAMC,KAAK,GAAG,IAAIC,MAAJ,CACX,+CAA8CL,UAAU,CAACM,OAAX,CAC7C,uBAD6C,EAE5C,MAF4C,CAG7C,EAJU,CAAd;AAOA,QAAM,CAACC,SAAD,IAAcN,GAAG,CAACO,QAAJ,GAAeC,KAAf,CAAsB,IAAtB,CAApB;AACA,SAAOL,KAAK,CAACM,IAAN,CAAWH,SAAS,CAACD,OAAV,CAAkB,OAAlB,EAA4B,IAA5B,CAAX,CAAP;AACD,CAlBM","sourcesContent":["// This module is also copied into the .cache directory some modules copied there\n// from cache-dir can also use this module.\nexport const testRequireError = (moduleName: string, err: any): boolean => {\n  // PnP will return the following code when a require is allowed per the\n  // dependency tree rules but the requested file doesn't exist\n  if (\n    err.code === `QUALIFIED_PATH_RESOLUTION_FAILED` ||\n    err.pnpCode === `QUALIFIED_PATH_RESOLUTION_FAILED`\n  ) {\n    return true\n  }\n  const regex = new RegExp(\n    `Error:\\\\s(\\\\S+\\\\s)?[Cc]annot find module\\\\s.${moduleName.replace(\n      /[-/\\\\^$*+?.()|[\\]{}]/g,\n      `\\\\$&`\n    )}`\n  )\n\n  const [firstLine] = err.toString().split(`\\n`)\n  return regex.test(firstLine.replace(/\\\\\\\\/g, `\\\\`))\n}\n"],"file":"test-require-error.js"}