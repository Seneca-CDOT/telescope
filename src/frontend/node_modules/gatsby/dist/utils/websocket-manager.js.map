{"version":3,"sources":["../../src/utils/websocket-manager.ts"],"names":["getPageData","pagePath","program","pages","store","getState","publicDir","path","join","directory","result","id","undefined","has","pageData","err","Error","getStaticQueryData","staticQueryId","filePath","fs","pathExists","fileResult","readJson","hashPaths","paths","map","update","digest","getRoomNameFromPath","WebsocketManager","activePaths","Set","connectedClients","errors","Map","pageResults","staticQueryResults","init","server","websocket","pingTimeout","on","socket","activePath","handshake","headers","referer","url","parse","add","forEach","message","errorID","send","type","payload","leaveRoom","leave","leftRoom","sockets","adapter","rooms","length","delete","getDataForPath","get","set","console","log","staticQueryHashes","Promise","all","queryId","staticQueryResult","why","telemetry","trackCli","siteMeasurements","clientsCount","Array","from","debounce","getSocket","emitStaticQueryData","data","emitPageData","emitError","websocketManager"],"mappings":"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","sourcesContent":["/* eslint-disable no-invalid-this */\nimport path from \"path\"\nimport { store } from \"../redux\"\nimport { Server as HTTPSServer } from \"https\"\nimport { Server as HTTPServer } from \"http\"\nimport fs from \"fs-extra\"\nimport { readPageData, IPageDataWithQueryResult } from \"../utils/page-data\"\nimport telemetry from \"gatsby-telemetry\"\nimport url from \"url\"\nimport { createHash } from \"crypto\"\nimport { normalizePagePath, denormalizePagePath } from \"./normalize-page-path\"\nimport socketIO from \"socket.io\"\n\nexport interface IPageQueryResult {\n  id: string\n  result?: IPageDataWithQueryResult\n}\n\nexport interface IStaticQueryResult {\n  id: string\n  result: unknown // TODO: Improve this once we understand what the type is\n}\n\ntype PageResultsMap = Map<string, IPageQueryResult>\ntype QueryResultsMap = Map<string, IStaticQueryResult>\n\n/**\n * Get page query result for given page path.\n * @param {string} pagePath Path to a page.\n */\nasync function getPageData(pagePath: string): Promise<IPageQueryResult> {\n  const { program, pages } = store.getState()\n  const publicDir = path.join(program.directory, `public`)\n\n  const result: IPageQueryResult = {\n    id: pagePath,\n    result: undefined,\n  }\n  if (pages.has(denormalizePagePath(pagePath)) || pages.has(pagePath)) {\n    try {\n      const pageData: IPageDataWithQueryResult = await readPageData(\n        publicDir,\n        pagePath\n      )\n\n      result.result = pageData\n    } catch (err) {\n      throw new Error(\n        `Error loading a result for the page query in \"${pagePath}\". Query was not run and no cached result was found.`\n      )\n    }\n  }\n\n  return result\n}\n\n/**\n * Get page query result for given page path.\n * @param {string} pagePath Path to a page.\n */\nasync function getStaticQueryData(\n  staticQueryId: string\n): Promise<IStaticQueryResult> {\n  const { program } = store.getState()\n  const publicDir = path.join(program.directory, `public`)\n\n  const filePath = path.join(\n    publicDir,\n    `page-data`,\n    `sq`,\n    `d`,\n    `${staticQueryId}.json`\n  )\n\n  const result: IStaticQueryResult = {\n    id: staticQueryId,\n    result: undefined,\n  }\n  if (await fs.pathExists(filePath)) {\n    try {\n      const fileResult = await fs.readJson(filePath)\n\n      result.result = fileResult\n    } catch (err) {\n      // ignore errors\n    }\n  }\n\n  return result\n}\n\nfunction hashPaths(paths: Array<string>): Array<string> {\n  return paths.map(path => createHash(`sha256`).update(path).digest(`hex`))\n}\n\nconst getRoomNameFromPath = (path: string): string => `path-${path}`\n\nexport class WebsocketManager {\n  activePaths: Set<string> = new Set()\n  connectedClients = 0\n  errors: Map<string, string> = new Map()\n  pageResults: PageResultsMap = new Map()\n  staticQueryResults: QueryResultsMap = new Map()\n  websocket: socketIO.Server | undefined\n\n  init = ({\n    server,\n  }: {\n    directory: string\n    server: HTTPSServer | HTTPServer\n  }): socketIO.Server => {\n    this.websocket = socketIO(server, {\n      // we see ping-pong timeouts on gatsby-cloud when socket.io is running for a while\n      // increasing it should help\n      // @see https://github.com/socketio/socket.io/issues/3259#issuecomment-448058937\n      pingTimeout: 30000,\n    })\n\n    this.websocket.on(`connection`, socket => {\n      let activePath: string | null = null\n      if (socket?.handshake?.headers?.referer) {\n        const path = url.parse(socket.handshake.headers.referer).path\n        if (path) {\n          activePath = path\n          this.activePaths.add(path)\n        }\n      }\n\n      this.connectedClients += 1\n      this.errors.forEach((message, errorID) => {\n        socket.send({\n          type: `overlayError`,\n          payload: {\n            id: errorID,\n            message,\n          },\n        })\n      })\n\n      const leaveRoom = (path: string): void => {\n        socket.leave(getRoomNameFromPath(path))\n        if (!this.websocket) return\n        const leftRoom = this.websocket.sockets.adapter.rooms[\n          getRoomNameFromPath(path)\n        ]\n        if (!leftRoom || leftRoom.length === 0) {\n          this.activePaths.delete(path)\n        }\n      }\n\n      const getDataForPath = async (path: string): Promise<void> => {\n        let pageData = this.pageResults.get(path)\n        if (!pageData) {\n          try {\n            pageData = await getPageData(path)\n\n            this.pageResults.set(path, pageData)\n          } catch (err) {\n            console.log(err.message)\n            return\n          }\n        }\n\n        const staticQueryHashes = pageData.result?.staticQueryHashes ?? []\n        await Promise.all(\n          staticQueryHashes.map(async queryId => {\n            let staticQueryResult = this.staticQueryResults.get(queryId)\n\n            if (!staticQueryResult) {\n              staticQueryResult = await getStaticQueryData(queryId)\n              this.staticQueryResults.set(queryId, staticQueryResult)\n            }\n\n            socket.send({\n              type: `staticQueryResult`,\n              payload: staticQueryResult,\n            })\n          })\n        )\n\n        socket.send({\n          type: `pageQueryResult`,\n          why: `getDataForPath`,\n          payload: pageData,\n        })\n\n        if (this.connectedClients > 0) {\n          telemetry.trackCli(\n            `WEBSOCKET_PAGE_DATA_UPDATE`,\n            {\n              siteMeasurements: {\n                clientsCount: this.connectedClients,\n                paths: hashPaths(Array.from(this.activePaths)),\n              },\n            },\n            { debounce: true }\n          )\n        }\n      }\n\n      socket.on(`getDataForPath`, getDataForPath)\n\n      socket.on(`registerPath`, (path: string): void => {\n        socket.join(getRoomNameFromPath(path))\n        if (path) {\n          activePath = path\n          this.activePaths.add(path)\n        }\n      })\n\n      socket.on(`disconnect`, (): void => {\n        if (activePath) leaveRoom(activePath)\n        this.connectedClients -= 1\n      })\n\n      socket.on(`unregisterPath`, (path: string): void => {\n        leaveRoom(path)\n      })\n    })\n\n    return this.websocket\n  }\n\n  getSocket = (): socketIO.Server | undefined => this.websocket\n\n  emitStaticQueryData = (data: IStaticQueryResult): void => {\n    this.staticQueryResults.set(data.id, data)\n\n    if (this.websocket) {\n      this.websocket.send({ type: `staticQueryResult`, payload: data })\n\n      if (this.connectedClients > 0) {\n        telemetry.trackCli(\n          `WEBSOCKET_EMIT_STATIC_PAGE_DATA_UPDATE`,\n          {\n            siteMeasurements: {\n              clientsCount: this.connectedClients,\n              paths: hashPaths(Array.from(this.activePaths)),\n            },\n          },\n          { debounce: true }\n        )\n      }\n    }\n  }\n\n  emitPageData = (data: IPageQueryResult): void => {\n    data.id = normalizePagePath(data.id)\n    this.pageResults.set(data.id, data)\n\n    if (this.websocket) {\n      this.websocket.send({ type: `pageQueryResult`, payload: data })\n\n      if (this.connectedClients > 0) {\n        telemetry.trackCli(\n          `WEBSOCKET_EMIT_PAGE_DATA_UPDATE`,\n          {\n            siteMeasurements: {\n              clientsCount: this.connectedClients,\n              paths: hashPaths(Array.from(this.activePaths)),\n            },\n          },\n          { debounce: true }\n        )\n      }\n    }\n  }\n\n  emitError = (id: string, message?: string): void => {\n    if (message) {\n      this.errors.set(id, message)\n    } else {\n      this.errors.delete(id)\n    }\n\n    if (this.websocket) {\n      this.websocket.send({ type: `overlayError`, payload: { id, message } })\n    }\n  }\n}\n\nexport const websocketManager: WebsocketManager = new WebsocketManager()\n"],"file":"websocket-manager.js"}