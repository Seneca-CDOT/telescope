{"version":3,"sources":["../../src/utils/jobs-manager.ts"],"names":["MESSAGE_TYPES","WorkerError","Error","constructor","error","message","JSON","stringify","name","captureStackTrace","activityForJobs","activeJobs","isListeningForMessages","hasShownIPCDisabledWarning","jobsInProcess","Map","externalJobsMap","convertPathsToAbsolute","filePath","path","isAbsolute","createFileHash","hasha","fromFileSync","algorithm","hasActiveJobs","hasExternalJobsEnabled","process","env","ENABLE_GATSBY_EXTERNAL_JOBS","runLocalWorker","workerFn","job","fs","ensureDir","outputDir","Promise","resolve","reject","setImmediate","inputPaths","args","err","listenForJobMessages","on","msg","type","payload","id","has","deferred","get","JOB_COMPLETED","result","JOB_FAILED","JOB_NOT_WHITELISTED","runJob","delete","runExternalWorker","set","send","JOB_CREATED","promise","forceLocal","plugin","worker","require","posix","join","isLocal","reporter","warn","version","isInternalJob","undefined","contentDigest","createInternalJob","inputPathsWithContentDigest","map","pth","internalJob","includes","inputPath","enqueueJob","phantomActivity","start","_","isPlainObject","end","getInProcessJobPromise","removeInProgressJob","waitUntilAllJobsComplete","isJobStale","areInputPathsStale","some","existsSync","fileHash"],"mappings":"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","sourcesContent":["import uuidv4 from \"uuid/v4\"\nimport path from \"path\"\nimport hasha from \"hasha\"\nimport fs from \"fs-extra\"\nimport pDefer from \"p-defer\"\nimport _ from \"lodash\"\nimport { createContentDigest, slash } from \"gatsby-core-utils\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { IPhantomReporter } from \"gatsby-cli\"\n\nenum MESSAGE_TYPES {\n  JOB_CREATED = `JOB_CREATED`,\n  JOB_COMPLETED = `JOB_COMPLETED`,\n  JOB_FAILED = `JOB_FAILED`,\n  JOB_NOT_WHITELISTED = `JOB_NOT_WHITELISTED`,\n}\n\ninterface IBaseJob {\n  name: string\n  outputDir: string\n  args: Record<string, any>\n}\n\ninterface IJobInput {\n  inputPaths: Array<string>\n  plugin: {\n    name: string\n    version: string\n    resolve: string\n  }\n}\n\ninterface IInternalJob {\n  id: string\n  contentDigest: string\n  inputPaths: Array<{\n    path: string\n    contentDigest: string\n  }>\n  plugin: {\n    name: string\n    version: string\n    resolve: string\n    isLocal: boolean\n  }\n}\n\nexport type JobResultInterface = Record<string, unknown>\nexport type JobInput = IBaseJob & IJobInput\nexport type InternalJob = IBaseJob & IInternalJob\n\nexport class WorkerError extends Error {\n  constructor(error: Error | string) {\n    if (typeof error === `string`) {\n      super(error)\n    } else {\n      // use error.message or else stringiyf the object so we don't get [Object object]\n      super(error.message ?? JSON.stringify(error))\n    }\n\n    this.name = `WorkerError`\n\n    Error.captureStackTrace(this, WorkerError)\n  }\n}\n\nlet activityForJobs: IPhantomReporter | null = null\nlet activeJobs = 0\nlet isListeningForMessages = false\nlet hasShownIPCDisabledWarning = false\n\nconst jobsInProcess: Map<\n  string,\n  { id: string; deferred: pDefer.DeferredPromise<object> }\n> = new Map()\nconst externalJobsMap: Map<\n  string,\n  { job: InternalJob; deferred: pDefer.DeferredPromise<any> }\n> = new Map()\n\n/**\n * We want to use absolute paths to make sure they are on the filesystem\n */\nfunction convertPathsToAbsolute(filePath: string): string {\n  if (!path.isAbsolute(filePath)) {\n    throw new Error(`${filePath} should be an absolute path.`)\n  }\n\n  return slash(filePath)\n}\n/**\n * Get contenthash of a file\n */\nfunction createFileHash(path: string): string {\n  return hasha.fromFileSync(path, { algorithm: `sha1` })\n}\n\nlet hasActiveJobs: pDefer.DeferredPromise<void> | null = null\n\nfunction hasExternalJobsEnabled(): boolean {\n  return (\n    process.env.ENABLE_GATSBY_EXTERNAL_JOBS === `true` ||\n    process.env.ENABLE_GATSBY_EXTERNAL_JOBS === `1`\n  )\n}\n\n/**\n * Get the local worker function and execute it on the user's machine\n */\nasync function runLocalWorker<T>(\n  workerFn: { ({ inputPaths, outputDir, args }: InternalJob): T },\n  job: InternalJob\n): Promise<T> {\n  await fs.ensureDir(job.outputDir)\n\n  return new Promise((resolve, reject) => {\n    // execute worker nextTick\n    // TODO should we think about threading/queueing here?\n    setImmediate(() => {\n      try {\n        resolve(\n          workerFn({\n            inputPaths: job.inputPaths,\n            outputDir: job.outputDir,\n            args: job.args,\n          } as InternalJob)\n        )\n      } catch (err) {\n        reject(new WorkerError(err))\n      }\n    })\n  })\n}\n\nfunction listenForJobMessages(): void {\n  process.on(`message`, msg => {\n    if (\n      msg &&\n      msg.type &&\n      msg.payload &&\n      msg.payload.id &&\n      externalJobsMap.has(msg.payload.id)\n    ) {\n      const { job, deferred } = externalJobsMap.get(msg.payload.id)!\n\n      switch (msg.type) {\n        case MESSAGE_TYPES.JOB_COMPLETED: {\n          deferred.resolve(msg.payload.result)\n          break\n        }\n        case MESSAGE_TYPES.JOB_FAILED: {\n          deferred.reject(new WorkerError(msg.payload.error))\n          break\n        }\n        case MESSAGE_TYPES.JOB_NOT_WHITELISTED: {\n          deferred.resolve(runJob(job, true))\n          break\n        }\n      }\n\n      externalJobsMap.delete(msg.payload.id)\n    }\n  })\n}\n\nfunction runExternalWorker(job: InternalJob): Promise<any> {\n  const deferred = pDefer<any>()\n\n  externalJobsMap.set(job.id, {\n    job,\n    deferred,\n  })\n\n  process.send!({\n    type: MESSAGE_TYPES.JOB_CREATED,\n    payload: job,\n  })\n\n  return deferred.promise\n}\n\n/**\n * Make sure we have everything we need to run a job\n * If we do, run it locally.\n * TODO add external job execution through ipc\n */\nfunction runJob(job: InternalJob, forceLocal = false): Promise<object> {\n  const { plugin } = job\n  try {\n    const worker = require(path.posix.join(plugin.resolve, `gatsby-worker.js`))\n    if (!worker[job.name]) {\n      throw new Error(`No worker function found for ${job.name}`)\n    }\n\n    if (!forceLocal && !job.plugin.isLocal && hasExternalJobsEnabled()) {\n      if (process.send) {\n        if (!isListeningForMessages) {\n          isListeningForMessages = true\n          listenForJobMessages()\n        }\n\n        return runExternalWorker(job)\n      } else {\n        // only show the offloading warning once\n        if (!hasShownIPCDisabledWarning) {\n          hasShownIPCDisabledWarning = true\n          reporter.warn(\n            `Offloading of a job failed as IPC could not be detected. Running job locally.`\n          )\n        }\n      }\n    }\n    return runLocalWorker(worker[job.name], job)\n  } catch (err) {\n    throw new Error(\n      `We couldn't find a gatsby-worker.js(${plugin.resolve}/gatsby-worker.js) file for ${plugin.name}@${plugin.version}`\n    )\n  }\n}\n\nfunction isInternalJob(job: JobInput | InternalJob): job is InternalJob {\n  return (\n    (job as InternalJob).id !== undefined &&\n    (job as InternalJob).contentDigest !== undefined\n  )\n}\n\n/**\n * Create an internal job object\n */\nexport function createInternalJob(\n  job: JobInput | InternalJob,\n  plugin: { name: string; version: string; resolve: string }\n): InternalJob {\n  // It looks like we already have an augmented job so we shouldn't redo this work\n  if (isInternalJob(job)) {\n    return job\n  }\n\n  const { name, inputPaths, outputDir, args } = job\n\n  // TODO see if we can make this async, filehashing might be expensive to wait for\n  // currently this needs to be sync as we could miss jobs to have been scheduled and\n  // are still processing their hashes\n  const inputPathsWithContentDigest = inputPaths.map((pth: string) => {\n    return {\n      path: convertPathsToAbsolute(pth),\n      contentDigest: createFileHash(pth),\n    }\n  })\n\n  const internalJob: InternalJob = {\n    id: uuidv4(),\n    name,\n    contentDigest: ``,\n    inputPaths: inputPathsWithContentDigest,\n    outputDir: convertPathsToAbsolute(outputDir),\n    args,\n    plugin: {\n      name: plugin.name,\n      version: plugin.version,\n      resolve: plugin.resolve,\n      isLocal: !plugin.resolve.includes(`/node_modules/`),\n    },\n  }\n\n  // generate a contentDigest based on all parameters including file content\n  internalJob.contentDigest = createContentDigest({\n    name: job.name,\n    inputPaths: internalJob.inputPaths.map(\n      inputPath => inputPath.contentDigest\n    ),\n    outputDir: internalJob.outputDir,\n    args: internalJob.args,\n    plugin: internalJob.plugin,\n  })\n\n  return internalJob\n}\n\n/**\n * Creates a job\n */\nexport async function enqueueJob(job: InternalJob): Promise<object> {\n  // When we already have a job that's executing, return the same promise.\n  // we have another check in our createJobV2 action to return jobs that have been done in a previous gatsby run\n  if (jobsInProcess.has(job.contentDigest)) {\n    return jobsInProcess.get(job.contentDigest)!.deferred.promise\n  }\n\n  if (activeJobs === 0) {\n    hasActiveJobs = pDefer<void>()\n  }\n\n  // Bump active jobs\n  activeJobs++\n  if (!activityForJobs) {\n    activityForJobs = reporter.phantomActivity(`Running jobs v2`)\n    activityForJobs!.start()\n  }\n\n  const deferred = pDefer<object>()\n  jobsInProcess.set(job.contentDigest, {\n    id: job.id,\n    deferred,\n  })\n\n  try {\n    const result = await runJob(job)\n    // this check is to keep our worker results consistent for cloud\n    if (result != null && !_.isPlainObject(result)) {\n      throw new Error(\n        `Result of a worker should be an object, type of \"${typeof result}\" was given`\n      )\n    }\n    deferred.resolve(result)\n  } catch (err) {\n    deferred.reject(new WorkerError(err))\n  } finally {\n    // when all jobs are done we end the activity\n    if (--activeJobs === 0) {\n      hasActiveJobs!.resolve()\n      activityForJobs!.end()\n      // eslint-disable-next-line require-atomic-updates\n      activityForJobs = null\n    }\n  }\n\n  return deferred.promise\n}\n\n/**\n * Get in progress job promise\n */\nexport function getInProcessJobPromise(\n  contentDigest: string\n): Promise<object> | undefined {\n  return jobsInProcess.get(contentDigest)?.deferred.promise\n}\n\n/**\n * Remove a job from our inProgressQueue to reduce memory usage\n */\nexport function removeInProgressJob(contentDigest: string): void {\n  jobsInProcess.delete(contentDigest)\n}\n\n/**\n * Wait for all processing jobs to have finished\n */\nexport function waitUntilAllJobsComplete(): Promise<void> {\n  return hasActiveJobs ? hasActiveJobs.promise : Promise.resolve()\n}\n\nexport function isJobStale(\n  job: Partial<InternalJob> & { inputPaths: InternalJob[\"inputPaths\"] }\n): boolean {\n  const areInputPathsStale = job.inputPaths.some(inputPath => {\n    // does the inputPath still exists?\n    if (!fs.existsSync(inputPath.path)) {\n      return true\n    }\n\n    // check if we're talking about the same file\n    const fileHash = createFileHash(inputPath.path)\n    return fileHash !== inputPath.contentDigest\n  })\n\n  return areInputPathsStale\n}\n"],"file":"jobs-manager.js"}