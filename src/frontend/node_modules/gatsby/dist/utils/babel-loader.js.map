{"version":3,"sources":["../../src/utils/babel-loader.js"],"names":["babelLoader","require","prepareOptions","getCustomOptions","mergeConfigItemOptions","getBrowsersList","module","exports","custom","babel","toReturn","customOptions","stage","reactRuntime","rootDir","process","cwd","options","loader","cacheIdentifier","JSON","stringify","browerslist","version","gatsbyPreset","env","getEnv","sourceType","config","partialConfig","reduxPresets","reduxPlugins","requiredPresets","requiredPlugins","fallbackPresets","hasFilesystemConfig","plugins","presets","forEach","preset","items","itemToMerge","type","plugin"],"mappings":"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","sourcesContent":["const babelLoader = require(`babel-loader`)\n\nconst {\n  prepareOptions,\n  getCustomOptions,\n  mergeConfigItemOptions,\n} = require(`./babel-loader-helpers`)\nconst { getBrowsersList } = require(`./browserslist`)\n\n/**\n * Gatsby's custom loader for webpack & babel\n *\n * Gatsby allows sites to either use our Babel setup (the default)\n * or to add a .babelrc to take control.\n *\n * Our default setup is defined in the fallbackPlugins/fallbackPresets arrays\n * below.\n *\n * After using either the fallback or user supplied setup, we add on a handful\n * of required plugins and finally merge in any presets/plugins supplied\n * by Gatsby plugins.\n *\n * You can find documentation for the custom loader here: https://babeljs.io/docs/en/next/babel-core.html#loadpartialconfig\n */\nmodule.exports = babelLoader.custom(babel => {\n  const toReturn = {\n    // Passed the loader options.\n    customOptions({\n      stage = `test`,\n      reactRuntime = `classic`,\n      rootDir = process.cwd(),\n      ...options\n    }) {\n      return {\n        custom: {\n          stage,\n          reactRuntime,\n        },\n        loader: {\n          cacheIdentifier: JSON.stringify({\n            browerslist: getBrowsersList(rootDir),\n            babel: babel.version,\n            gatsbyPreset: require(`babel-preset-gatsby/package.json`).version,\n            env: babel.getEnv(),\n          }),\n          sourceType: `unambiguous`,\n          ...getCustomOptions(stage),\n          ...options,\n        },\n      }\n    },\n\n    // Passed Babel's 'PartialConfig' object.\n    config(partialConfig, { customOptions }) {\n      let { options } = partialConfig\n      const [\n        reduxPresets,\n        reduxPlugins,\n        requiredPresets,\n        requiredPlugins,\n        fallbackPresets,\n      ] = prepareOptions(babel, customOptions)\n\n      // If there is no filesystem babel config present, add our fallback\n      // presets/plugins.\n      if (!partialConfig.hasFilesystemConfig()) {\n        options = {\n          ...options,\n          plugins: requiredPlugins,\n          presets: [...fallbackPresets, ...requiredPresets],\n        }\n      } else {\n        // With a babelrc present, only add our required plugins/presets\n        options = {\n          ...options,\n          plugins: [...options.plugins, ...requiredPlugins],\n          presets: [...options.presets, ...requiredPresets],\n        }\n      }\n\n      // Merge in presets/plugins added from gatsby plugins.\n      reduxPresets.forEach(preset => {\n        options.presets = mergeConfigItemOptions({\n          items: options.presets,\n          itemToMerge: preset,\n          type: `preset`,\n          babel,\n        })\n      })\n\n      reduxPlugins.forEach(plugin => {\n        options.plugins = mergeConfigItemOptions({\n          items: options.plugins,\n          itemToMerge: plugin,\n          type: `plugin`,\n          babel,\n        })\n      })\n\n      return options\n    },\n  }\n\n  return toReturn\n})\n"],"file":"babel-loader.js"}