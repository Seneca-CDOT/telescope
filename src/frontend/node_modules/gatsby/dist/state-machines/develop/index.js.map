{"version":3,"sources":["../../../src/state-machines/develop/index.ts"],"names":["RECOMPILE_PANIC_LIMIT","developConfig","id","initial","on","ADD_NODE_MUTATION","actions","SOURCE_FILE_CHANGED","WEBHOOK_RECEIVED","target","states","initializing","undefined","invoke","src","onDone","onError","initializingData","data","parentSpan","store","webhookBody","deferNodeMutation","runningPostBootstrap","runningQueries","program","gatsbyNodeGraphQLFunction","graphqlRunner","websocketManager","cond","nodesMutatedDuringQueryRun","nodesMutatedDuringQueryRunRecompileCount","compiler","sourceFilesDirty","recompiling","startingDevServers","waiting","entry","EXTRACT_QUERIES_NOW","nodeMutationBatch","runningBatch","reloadingData","refresh","recreatingPages","developMachine","services","developServices","buildActions"],"mappings":";;;;;AAAA;;AAIA;;AACA;;AAGA,MAAMA,qBAAqB,GAAG,CAA9B;AAEA;;;;AAGA,MAAMC,aAAgE,GAAG;AACvEC,EAAAA,EAAE,EAAG,OADkE;AAEvEC,EAAAA,OAAO,EAAG,cAF6D;AAGvE;AACA;AACAC,EAAAA,EAAE,EAAE;AACF;AACAC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,OAAO,EAAG;AADO,KAFjB;AAKF;AACAC,IAAAA,mBAAmB,EAAE;AACnBD,MAAAA,OAAO,EAAG;AADS,KANnB;AASF;AACA;AACAE,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,MAAM,EAAG,eADO;AAEhBH,MAAAA,OAAO,EAAG;AAFM;AAXhB,GALmE;AAqBvEI,EAAAA,MAAM,EAAE;AACN;AACAC,IAAAA,YAAY,EAAE;AACZP,MAAAA,EAAE,EAAE;AACF;AACAC,QAAAA,iBAAiB,EAAEO,SAFjB;AAGFL,QAAAA,mBAAmB,EAAEK,SAHnB;AAIFJ,QAAAA,gBAAgB,EAAEI;AAJhB,OADQ;AAOZC,MAAAA,MAAM,EAAE;AACNX,QAAAA,EAAE,EAAG,YADC;AAENY,QAAAA,GAAG,EAAG,YAFA;AAGNC,QAAAA,MAAM,EAAE;AACNN,UAAAA,MAAM,EAAG,kBADH;AAENH,UAAAA,OAAO,EAAE,CAAE,0BAAF,EAA8B,uBAA9B;AAFH,SAHF;AAONU,QAAAA,OAAO,EAAE;AACPV,UAAAA,OAAO,EAAG;AADH;AAPH;AAPI,KAFR;AAqBN;AACAW,IAAAA,gBAAgB,EAAE;AAChBb,MAAAA,EAAE,EAAE;AACF;AACAC,QAAAA,iBAAiB,EAAE;AACjBC,UAAAA,OAAO,EAAG;AADO;AAFjB,OADY;AAOhBO,MAAAA,MAAM,EAAE;AACNX,QAAAA,EAAE,EAAG,iBADC;AAENY,QAAAA,GAAG,EAAG,gBAFA;AAGNI,QAAAA,IAAI,EAAE,CAAC;AACLC,UAAAA,UADK;AAELC,UAAAA,KAFK;AAGLC,UAAAA;AAHK,SAAD,KAIkC;AACtC,iBAAO;AACLF,YAAAA,UADK;AAELC,YAAAA,KAFK;AAGLC,YAAAA,WAHK;AAILC,YAAAA,iBAAiB,EAAE;AAJd,WAAP;AAMD,SAdK;AAeNP,QAAAA,MAAM,EAAE;AACNT,UAAAA,OAAO,EAAE,CACN,qBADM,EAEN,kBAFM,EAGN,kBAHM,CADH;AAMNG,UAAAA,MAAM,EAAG;AANH,SAfF;AAuBNO,QAAAA,OAAO,EAAE;AACPV,UAAAA,OAAO,EAAG,UADH;AAEPG,UAAAA,MAAM,EAAG;AAFF;AAvBH;AAPQ,KAtBZ;AA0DNc,IAAAA,oBAAoB,EAAE;AACpBV,MAAAA,MAAM,EAAE;AACNX,QAAAA,EAAE,EAAG,gBADC;AAENY,QAAAA,GAAG,EAAG,eAFA;AAGNC,QAAAA,MAAM,EAAG;AAHH;AADY,KA1DhB;AAiEN;AACAS,IAAAA,cAAc,EAAE;AACdpB,MAAAA,EAAE,EAAE;AACFG,QAAAA,mBAAmB,EAAE;AACnBD,UAAAA,OAAO,EAAE,CAAC,uBAAW,aAAX,CAAD,EAA4B,sBAA5B;AADU,SADnB;AAIFD,QAAAA,iBAAiB,EAAE;AACjBC,UAAAA,OAAO,EAAE,CAAE,gBAAF,EAAoB,SAApB;AADQ;AAJjB,OADU;AASdO,MAAAA,MAAM,EAAE;AACNX,QAAAA,EAAE,EAAG,aADC;AAENY,QAAAA,GAAG,EAAG,YAFA;AAGN;AACAI,QAAAA,IAAI,EAAE,CAAC;AACLO,UAAAA,OADK;AAELL,UAAAA,KAFK;AAGLD,UAAAA,UAHK;AAILO,UAAAA,yBAJK;AAKLC,UAAAA,aALK;AAMLC,UAAAA;AANK,SAAD,KAOqC;AACzC,iBAAO;AACLH,YAAAA,OADK;AAELL,YAAAA,KAFK;AAGLD,YAAAA,UAHK;AAILO,YAAAA,yBAJK;AAKLC,YAAAA,aALK;AAMLC,YAAAA;AANK,WAAP;AAQD,SApBK;AAqBNb,QAAAA,MAAM,EAAE,CACN;AACE;AACAN,UAAAA,MAAM,EAAG,SAFX;AAGEH,UAAAA,OAAO,EAAG,4BAHZ;AAIEuB,UAAAA,IAAI,EAAE,CAAC;AACLC,YAAAA,0BAA0B,GAAG,KADxB;AAELC,YAAAA,wCAAwC,GAAG;AAFtC,WAAD,KAIJD,0BAA0B,IAC1BC,wCAAwC,IAAI/B;AAThD,SADM,EAYN;AACE;AACAS,UAAAA,MAAM,EAAG,iBAFX;AAGEoB,UAAAA,IAAI,EAAE,CAAC;AAAEC,YAAAA;AAAF,WAAD,KACJ,CAAC,CAACA,0BAJN;AAKExB,UAAAA,OAAO,EAAE,CAAE,gBAAF,EAAoB,yBAApB;AALX,SAZM,EAmBN;AACE;AACA;AACAG,UAAAA,MAAM,EAAG,oBAHX;AAIEH,UAAAA,OAAO,EAAG,yBAJZ;AAKEuB,UAAAA,IAAI,EAAE,CAAC;AAAEG,YAAAA;AAAF,WAAD,KAA0C,CAACA;AALnD,SAnBM,EA0BN;AACE;AACAvB,UAAAA,MAAM,EAAG,aAFX;AAGEoB,UAAAA,IAAI,EAAE,CAAC;AAAEI,YAAAA;AAAF,WAAD,KACJ,CAAC,CAACA;AAJN,SA1BM,EAgCN;AACE;AACAxB,UAAAA,MAAM,EAAG;AAFX,SAhCM,CArBF;AA0DNO,QAAAA,OAAO,EAAE;AACPV,UAAAA,OAAO,EAAG,UADH;AAEPG,UAAAA,MAAM,EAAG;AAFF;AA1DH;AATM,KAlEV;AA2IN;AACAyB,IAAAA,WAAW,EAAE;AACXrB,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,WADA;AAENC,QAAAA,MAAM,EAAE;AACNT,UAAAA,OAAO,EAAG,sBADJ;AAENG,UAAAA,MAAM,EAAG;AAFH,SAFF;AAMNO,QAAAA,OAAO,EAAE;AACPV,UAAAA,OAAO,EAAG,UADH;AAEPG,UAAAA,MAAM,EAAG;AAFF;AANH;AADG,KA5IP;AAyJN;AACA0B,IAAAA,kBAAkB,EAAE;AAClBtB,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,oBADA;AAENC,QAAAA,MAAM,EAAE;AACNN,UAAAA,MAAM,EAAG,SADH;AAENH,UAAAA,OAAO,EAAE,CACN,eADM,EAEN,sBAFM,EAGN,sBAHM;AAFH,SAFF;AAUNU,QAAAA,OAAO,EAAE;AACPV,UAAAA,OAAO,EAAG,OADH;AAEPG,UAAAA,MAAM,EAAG;AAFF;AAVH;AADU,KA1Jd;AA2KN;AACA2B,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,CAAE,aAAF,EAAiB,qBAAjB,CADA;AAEPjC,MAAAA,EAAE,EAAE;AACF;AACAC,QAAAA,iBAAiB,EAAE;AACjBC,UAAAA,OAAO,EAAE,uBAAW,SAAX;AADQ,SAFjB;AAKFC,QAAAA,mBAAmB,EAAE;AACnBD,UAAAA,OAAO,EAAE,CAAC,uBAAW,SAAX,CAAD,EAAwB,sBAAxB;AADU,SALnB;AAQF;AACAgC,QAAAA,mBAAmB,EAAE;AACnB7B,UAAAA,MAAM,EAAG;AADU;AATnB,OAFG;AAePI,MAAAA,MAAM,EAAE;AACNX,QAAAA,EAAE,EAAG,SADC;AAENY,QAAAA,GAAG,EAAG,kBAFA;AAGN;AACAI,QAAAA,IAAI,EAAE,CAAC;AACLE,UAAAA,KADK;AAELmB,UAAAA,iBAAiB,GAAG;AAFf,SAAD,KAGgC;AACpC,iBAAO;AAAEnB,YAAAA,KAAF;AAASmB,YAAAA,iBAAT;AAA4BC,YAAAA,YAAY,EAAE;AAA1C,WAAP;AACD,SATK;AAUN;AACAzB,QAAAA,MAAM,EAAE;AACNT,UAAAA,OAAO,EAAG,qBADJ;AAENG,UAAAA,MAAM,EAAG;AAFH,SAXF;AAeNO,QAAAA,OAAO,EAAE;AACPV,UAAAA,OAAO,EAAG;AADH;AAfH;AAfD,KA5KH;AA+MN;AACAmC,IAAAA,aAAa,EAAE;AACbrC,MAAAA,EAAE,EAAE;AACF;AACAC,QAAAA,iBAAiB,EAAE;AACjBC,UAAAA,OAAO,EAAG;AADO,SAFjB;AAKF;AACAC,QAAAA,mBAAmB,EAAEK;AANnB,OADS;AASbC,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,YADA;AAENI,QAAAA,IAAI,EAAE,CAAC;AACLC,UAAAA,UADK;AAELC,UAAAA,KAFK;AAGLC,UAAAA;AAHK,SAAD,KAIkC;AACtC,iBAAO;AACLF,YAAAA,UADK;AAELC,YAAAA,KAFK;AAGLC,YAAAA,WAHK;AAILqB,YAAAA,OAAO,EAAE,IAJJ;AAKLpB,YAAAA,iBAAiB,EAAE;AALd,WAAP;AAOD,SAdK;AAeNP,QAAAA,MAAM,EAAE;AACNT,UAAAA,OAAO,EAAE,CACN,qBADM,EAEN,kBAFM,EAGN,kBAHM,CADH;AAMNG,UAAAA,MAAM,EAAG;AANH,SAfF;AAuBNO,QAAAA,OAAO,EAAE;AACPV,UAAAA,OAAO,EAAG,UADH;AAEPG,UAAAA,MAAM,EAAG;AAFF;AAvBH;AATK,KAhNT;AAsPN;AACAkC,IAAAA,eAAe,EAAE;AACfvC,MAAAA,EAAE,EAAE;AACF;AACAC,QAAAA,iBAAiB,EAAE;AACjBC,UAAAA,OAAO,EAAG;AADO;AAFjB,OADW;AAOfO,MAAAA,MAAM,EAAE;AACNX,QAAAA,EAAE,EAAG,gBADC;AAENY,QAAAA,GAAG,EAAG,eAFA;AAGNI,QAAAA,IAAI,EAAE,CAAC;AAAEC,UAAAA,UAAF;AAAcC,UAAAA;AAAd,SAAD,KAA6D;AACjE,iBAAO;AAAED,YAAAA,UAAF;AAAcC,YAAAA,KAAd;AAAqBE,YAAAA,iBAAiB,EAAE;AAAxC,WAAP;AACD,SALK;AAMNP,QAAAA,MAAM,EAAE;AACNT,UAAAA,OAAO,EAAG,qBADJ;AAENG,UAAAA,MAAM,EAAG;AAFH,SANF;AAUNO,QAAAA,OAAO,EAAE;AACPV,UAAAA,OAAO,EAAG,UADH;AAEPG,UAAAA,MAAM,EAAG;AAFF;AAVH;AAPO;AAvPX;AArB+D,CAAzE;AAsSO,MAAMmC,cAAc,GAAG,qBAAQ3C,aAAR,EAAuB;AACnD4C,EAAAA,QAAQ,EAAEC,yBADyC;AAEnDxC,EAAAA,OAAO,EAAEyC;AAF0C,CAAvB,CAAvB","sourcesContent":["import { MachineConfig, AnyEventObject, forwardTo, Machine } from \"xstate\"\nimport { IDataLayerContext } from \"../data-layer/types\"\nimport { IQueryRunningContext } from \"../query-running/types\"\nimport { IWaitingContext } from \"../waiting/types\"\nimport { buildActions } from \"./actions\"\nimport { developServices } from \"./services\"\nimport { IBuildContext } from \"../../services\"\n\nconst RECOMPILE_PANIC_LIMIT = 6\n\n/**\n * This is the top-level state machine for the `gatsby develop` command\n */\nconst developConfig: MachineConfig<IBuildContext, any, AnyEventObject> = {\n  id: `build`,\n  initial: `initializing`,\n  // These are mutation events, sent to this machine by the mutation listener\n  // in `services/listen-for-mutations.ts`\n  on: {\n    // These are deferred node mutations, mainly `createNode`\n    ADD_NODE_MUTATION: {\n      actions: `addNodeMutation`,\n    },\n    // Sent when webpack or chokidar sees a changed file\n    SOURCE_FILE_CHANGED: {\n      actions: `markSourceFilesDirty`,\n    },\n    // These are calls to the refresh endpoint. Also used by Gatsby Preview.\n    // Saves the webhook body from the event into context, then reloads data\n    WEBHOOK_RECEIVED: {\n      target: `reloadingData`,\n      actions: `assignWebhookBody`,\n    },\n  },\n  states: {\n    // Here we handle the initial bootstrap\n    initializing: {\n      on: {\n        // Ignore mutation events because we'll be running everything anyway\n        ADD_NODE_MUTATION: undefined,\n        SOURCE_FILE_CHANGED: undefined,\n        WEBHOOK_RECEIVED: undefined,\n      },\n      invoke: {\n        id: `initialize`,\n        src: `initialize`,\n        onDone: {\n          target: `initializingData`,\n          actions: [`assignStoreAndWorkerPool`, `spawnMutationListener`],\n        },\n        onError: {\n          actions: `panic`,\n        },\n      },\n    },\n    // Sourcing nodes, customising and inferring schema, then running createPages\n    initializingData: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        id: `initialize-data`,\n        src: `initializeData`,\n        data: ({\n          parentSpan,\n          store,\n          webhookBody,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            webhookBody,\n            deferNodeMutation: true,\n          }\n        },\n        onDone: {\n          actions: [\n            `assignServiceResult`,\n            `clearWebhookBody`,\n            `finishParentSpan`,\n          ],\n          target: `runningPostBootstrap`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    runningPostBootstrap: {\n      invoke: {\n        id: `post-bootstrap`,\n        src: `postBootstrap`,\n        onDone: `runningQueries`,\n      },\n    },\n    // Running page and static queries and generating the SSRed HTML and page data\n    runningQueries: {\n      on: {\n        SOURCE_FILE_CHANGED: {\n          actions: [forwardTo(`run-queries`), `markSourceFilesDirty`],\n        },\n        ADD_NODE_MUTATION: {\n          actions: [`markNodesDirty`, `callApi`],\n        },\n      },\n      invoke: {\n        id: `run-queries`,\n        src: `runQueries`,\n        // This is all the data that we're sending to the child machine\n        data: ({\n          program,\n          store,\n          parentSpan,\n          gatsbyNodeGraphQLFunction,\n          graphqlRunner,\n          websocketManager,\n        }: IBuildContext): IQueryRunningContext => {\n          return {\n            program,\n            store,\n            parentSpan,\n            gatsbyNodeGraphQLFunction,\n            graphqlRunner,\n            websocketManager,\n          }\n        },\n        onDone: [\n          {\n            // If we're at the recompile limit and nodes were mutated again then panic\n            target: `waiting`,\n            actions: `panicBecauseOfInfiniteLoop`,\n            cond: ({\n              nodesMutatedDuringQueryRun = false,\n              nodesMutatedDuringQueryRunRecompileCount = 0,\n            }: IBuildContext): boolean =>\n              nodesMutatedDuringQueryRun &&\n              nodesMutatedDuringQueryRunRecompileCount >= RECOMPILE_PANIC_LIMIT,\n          },\n          {\n            // Nodes were mutated while querying, so we need to re-run everything\n            target: `recreatingPages`,\n            cond: ({ nodesMutatedDuringQueryRun }: IBuildContext): boolean =>\n              !!nodesMutatedDuringQueryRun,\n            actions: [`markNodesClean`, `incrementRecompileCount`],\n          },\n          {\n            // If we have no compiler (i.e. it's first run), then spin up the\n            // webpack and socket.io servers\n            target: `startingDevServers`,\n            actions: `setQueryRunningFinished`,\n            cond: ({ compiler }: IBuildContext): boolean => !compiler,\n          },\n          {\n            // If source files have changed, then recompile the JS bundle\n            target: `recompiling`,\n            cond: ({ sourceFilesDirty }: IBuildContext): boolean =>\n              !!sourceFilesDirty,\n          },\n          {\n            // ...otherwise just wait.\n            target: `waiting`,\n          },\n        ],\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Recompile the JS bundle\n    recompiling: {\n      invoke: {\n        src: `recompile`,\n        onDone: {\n          actions: `markSourceFilesClean`,\n          target: `waiting`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Spin up webpack and socket.io\n    startingDevServers: {\n      invoke: {\n        src: `startWebpackServer`,\n        onDone: {\n          target: `waiting`,\n          actions: [\n            `assignServers`,\n            `spawnWebpackListener`,\n            `markSourceFilesClean`,\n          ],\n        },\n        onError: {\n          actions: `panic`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Idle, waiting for events that make us rebuild\n    waiting: {\n      entry: [`saveDbState`, `resetRecompileCount`],\n      on: {\n        // Forward these events to the child machine, so it can handle batching\n        ADD_NODE_MUTATION: {\n          actions: forwardTo(`waiting`),\n        },\n        SOURCE_FILE_CHANGED: {\n          actions: [forwardTo(`waiting`), `markSourceFilesDirty`],\n        },\n        // This event is sent from the child\n        EXTRACT_QUERIES_NOW: {\n          target: `runningQueries`,\n        },\n      },\n      invoke: {\n        id: `waiting`,\n        src: `waitForMutations`,\n        // Send existing queued mutations to the child machine, which will execute them\n        data: ({\n          store,\n          nodeMutationBatch = [],\n        }: IBuildContext): IWaitingContext => {\n          return { store, nodeMutationBatch, runningBatch: [] }\n        },\n        // \"done\" means we need to rebuild\n        onDone: {\n          actions: `assignServiceResult`,\n          target: `recreatingPages`,\n        },\n        onError: {\n          actions: `panic`,\n        },\n      },\n    },\n    // Almost the same as initializing data, but skips various first-run stuff\n    reloadingData: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n        // Ignore, because we're about to extract them anyway\n        SOURCE_FILE_CHANGED: undefined,\n      },\n      invoke: {\n        src: `reloadData`,\n        data: ({\n          parentSpan,\n          store,\n          webhookBody,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            webhookBody,\n            refresh: true,\n            deferNodeMutation: true,\n          }\n        },\n        onDone: {\n          actions: [\n            `assignServiceResult`,\n            `clearWebhookBody`,\n            `finishParentSpan`,\n          ],\n          target: `runningQueries`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Rebuild pages if a node has been mutated outside of sourceNodes\n    recreatingPages: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        id: `recreate-pages`,\n        src: `recreatePages`,\n        data: ({ parentSpan, store }: IBuildContext): IDataLayerContext => {\n          return { parentSpan, store, deferNodeMutation: true }\n        },\n        onDone: {\n          actions: `assignServiceResult`,\n          target: `runningQueries`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n  },\n}\n\nexport const developMachine = Machine(developConfig, {\n  services: developServices,\n  actions: buildActions,\n})\n"],"file":"index.js"}