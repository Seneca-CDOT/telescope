{"version":3,"sources":["../../../src/state-machines/query-running/index.ts"],"names":["PAGE_QUERY_ENQUEUING_TIMEOUT","queryStates","initial","id","on","SOURCE_FILE_CHANGED","actions","context","states","extractingQueries","invoke","src","onDone","target","waitingPendingQueries","after","writingRequires","calculatingDirtyQueries","runningStaticQueries","runningPageQueries","waitingForJobs","always","cond","ctx","filesDirty","done","type","queryRunningMachine","queryActions","services","queryRunningServices"],"mappings":";;;;;AAAA;;AAEA;;AACA;;AAEA;;;AAIA,MAAMA,4BAA4B,GAAG,EAArC;AAEO,MAAMC,WAA0D,GAAG;AACxEC,EAAAA,OAAO,EAAG,mBAD8D;AAExEC,EAAAA,EAAE,EAAG,qBAFmE;AAGxEC,EAAAA,EAAE,EAAE;AACFC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,OAAO,EAAG;AADS;AADnB,GAHoE;AAQxEC,EAAAA,OAAO,EAAE,EAR+D;AASxEC,EAAAA,MAAM,EAAE;AACNC,IAAAA,iBAAiB,EAAE;AACjBN,MAAAA,EAAE,EAAG,oBADY;AAEjBO,MAAAA,MAAM,EAAE;AACNP,QAAAA,EAAE,EAAG,oBADC;AAENQ,QAAAA,GAAG,EAAG,gBAFA;AAGNC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG;AADH;AAHF;AAFS,KADb;AAWN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,qBAAqB,EAAE;AACrBX,MAAAA,EAAE,EAAG,yBADgB;AAErBY,MAAAA,KAAK,EAAE;AACL,SAACf,4BAAD,GAAgC;AAC9Ba,UAAAA,MAAM,EAAG,iBADqB;AAE9BP,UAAAA,OAAO,EAAG;AAFoB;AAD3B;AAFc,KAtBjB;AA+BNU,IAAAA,eAAe,EAAE;AACfN,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,kBADA;AAENR,QAAAA,EAAE,EAAG,kBAFC;AAGNS,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG;AADH;AAHF;AADO,KA/BX;AAwCNI,IAAAA,uBAAuB,EAAE;AACvBP,MAAAA,MAAM,EAAE;AACNP,QAAAA,EAAE,EAAG,2BADC;AAENQ,QAAAA,GAAG,EAAG,uBAFA;AAGNC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG,sBADH;AAENP,UAAAA,OAAO,EAAG;AAFJ;AAHF;AADe,KAxCnB;AAkDNY,IAAAA,oBAAoB,EAAE;AACpBR,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,kBADA;AAENR,QAAAA,EAAE,EAAG,wBAFC;AAGNS,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG;AADH;AAHF;AADY,KAlDhB;AA2DNM,IAAAA,kBAAkB,EAAE;AAClBT,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,gBADA;AAENR,QAAAA,EAAE,EAAG,sBAFC;AAGNS,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG,gBADH;AAENP,UAAAA,OAAO,EAAG;AAFJ;AAHF;AADU,KA3Dd;AAqEN;AACAc,IAAAA,cAAc,EAAE;AACd;AACAC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAGC,GAAD,IAAkB,CAAC,CAACA,GAAG,CAACC,UADxB;AAENX,QAAAA,MAAM,EAAG;AAFH,OAFM;AAMdH,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,0BADA;AAENR,QAAAA,EAAE,EAAG,kBAFC;AAGNS,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG;AADH;AAHF;AANM,KAtEV;AAoFNY,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAG;AADH;AApFA;AATgE,CAAnE;;AAkGA,MAAMC,mBAAmB,GAAG,qBAAQ1B,WAAR,EAAqB;AACtDK,EAAAA,OAAO,EAAEsB,qBAD6C;AAEtDC,EAAAA,QAAQ,EAAEC;AAF4C,CAArB,CAA5B","sourcesContent":["import { MachineConfig, Machine } from \"xstate\"\nimport { IQueryRunningContext } from \"./types\"\nimport { queryRunningServices } from \"./services\"\nimport { queryActions } from \"./actions\"\n\n/**\n * This is a child state machine, spawned to perform the query running\n */\n\nconst PAGE_QUERY_ENQUEUING_TIMEOUT = 50\n\nexport const queryStates: MachineConfig<IQueryRunningContext, any, any> = {\n  initial: `extractingQueries`,\n  id: `queryRunningMachine`,\n  on: {\n    SOURCE_FILE_CHANGED: {\n      actions: `markSourceFilesDirty`,\n    },\n  },\n  context: {},\n  states: {\n    extractingQueries: {\n      id: `extracting-queries`,\n      invoke: {\n        id: `extracting-queries`,\n        src: `extractQueries`,\n        onDone: {\n          target: `waitingPendingQueries`,\n        },\n      },\n    },\n    // This state exists solely because \"extractQueries\" finishes too early.\n    // It finishes before extracted queries are enqueued for execution.\n    // As a result calculateDirtyQueries doesn't see them and they are not executed.\n    //\n    // This happens because extracted queries are enqueued for execution with setTimeout(x, 0)\n    // wrapper in actions of redux/machines/page-component which fires after \"extractQueries\" finishes.\n    //\n    // see https://github.com/gatsbyjs/gatsby/issues/26580\n    //\n    // FIXME: this has to be fixed properly by not leaving \"extractingQueries\" state\n    //   until all extracted queries are enqueued for execution (but requires a refactor)\n    waitingPendingQueries: {\n      id: `waiting-pending-queries`,\n      after: {\n        [PAGE_QUERY_ENQUEUING_TIMEOUT]: {\n          target: `writingRequires`,\n          actions: `markSourceFilesClean`,\n        },\n      },\n    },\n    writingRequires: {\n      invoke: {\n        src: `writeOutRequires`,\n        id: `writing-requires`,\n        onDone: {\n          target: `calculatingDirtyQueries`,\n        },\n      },\n    },\n    calculatingDirtyQueries: {\n      invoke: {\n        id: `calculating-dirty-queries`,\n        src: `calculateDirtyQueries`,\n        onDone: {\n          target: `runningStaticQueries`,\n          actions: `assignDirtyQueries`,\n        },\n      },\n    },\n    runningStaticQueries: {\n      invoke: {\n        src: `runStaticQueries`,\n        id: `running-static-queries`,\n        onDone: {\n          target: `runningPageQueries`,\n        },\n      },\n    },\n    runningPageQueries: {\n      invoke: {\n        src: `runPageQueries`,\n        id: `running-page-queries`,\n        onDone: {\n          target: `waitingForJobs`,\n          actions: `flushPageData`,\n        },\n      },\n    },\n    // This waits for the jobs API to finish\n    waitingForJobs: {\n      // If files are dirty go and extract again\n      always: {\n        cond: (ctx): boolean => !!ctx.filesDirty,\n        target: `extractingQueries`,\n      },\n      invoke: {\n        src: `waitUntilAllJobsComplete`,\n        id: `waiting-for-jobs`,\n        onDone: {\n          target: `done`,\n        },\n      },\n    },\n    done: {\n      type: `final`,\n    },\n  },\n}\nexport const queryRunningMachine = Machine(queryStates, {\n  actions: queryActions,\n  services: queryRunningServices,\n})\n"],"file":"index.js"}