{"version":3,"sources":["../../src/commands/build.ts"],"names":["cachedPageData","cachedWebpackCompilationHash","process","env","GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES","pageData","webpackCompilationHash","module","exports","build","program","report","setVerbose","verbose","profile","warn","name","sitePackageJson","sitePath","directory","lastRun","Date","now","pid","publicDir","path","join","openTracingConfigFile","buildActivity","phantomActivity","start","telemetry","trackCli","exitCode","buildSpan","span","setTag","gatsbyNodeGraphQLFunction","parentSpan","graphqlRunner","GraphQLRunner","store","collectStats","graphqlTracing","queryIds","graphql","buildActivityTimer","activityTimer","stats","err","panic","Stage","BuildJavascript","end","workerPool","WorkerPool","create","hash","getState","appDataUtil","exists","dispatch","type","payload","rewriteActivityTimer","write","pages","forEach","_value","key","has","boundActionCreators","removePageData","id","isTrackingEnabled","bundleSizes","toJson","assets","filter","asset","endsWith","map","size","pageDataSizes","pageDataStats","values","addSiteMeasurement","bundleStats","aggregateStats","queryStats","getStats","setProgramStatus","db","saveState","pagePaths","keys","buildUtils","getChangedPageDataKeys","info","stripIndent","buildHTMLActivityProgress","createProgress","length","stage","BuildHTML","activity","context","errorPath","ref","match","message","error","deletedPageKeys","deletePageDataActivityTimer","collectRemovedPageData","removePageFiles","postBuildActivityTimer","uptime","finish","argv","includes","createdFilesPath","resolve","createdFilesContent","deletedFilesPath","deletedFilesContent","fs","writeFile"],"mappings":"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","sourcesContent":["import path from \"path\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport signalExit from \"signal-exit\"\nimport fs from \"fs-extra\"\nimport telemetry from \"gatsby-telemetry\"\n\nimport { buildHTML } from \"./build-html\"\nimport { buildProductionBundle } from \"./build-javascript\"\nimport { bootstrap } from \"../bootstrap\"\nimport apiRunnerNode from \"../utils/api-runner-node\"\nimport { GraphQLRunner } from \"../query/graphql-runner\"\nimport { copyStaticDirs } from \"../utils/get-static-dir\"\nimport { initTracer, stopTracer } from \"../utils/tracer\"\nimport db from \"../db\"\nimport { store, readState } from \"../redux\"\nimport * as appDataUtil from \"../utils/app-data\"\nimport { flush as flushPendingPageDataWrites } from \"../utils/page-data\"\nimport * as WorkerPool from \"../utils/worker/pool\"\nimport { structureWebpackErrors } from \"../utils/webpack-error-utils\"\nimport {\n  userGetsSevenDayFeedback,\n  userPassesFeedbackRequestHeuristic,\n  showFeedbackRequest,\n  showSevenDayFeedbackRequest,\n} from \"../utils/feedback\"\nimport * as buildUtils from \"./build-utils\"\nimport { boundActionCreators } from \"../redux/actions\"\nimport { waitUntilAllJobsComplete } from \"../utils/wait-until-jobs-complete\"\nimport { IProgram, Stage } from \"./types\"\nimport { PackageJson } from \"../..\"\nimport {\n  calculateDirtyQueries,\n  runStaticQueries,\n  runPageQueries,\n  writeOutRequires,\n} from \"../services\"\nimport {\n  markWebpackStatusAsPending,\n  markWebpackStatusAsDone,\n} from \"../utils/webpack-status\"\nimport { updateSiteMetadata } from \"gatsby-core-utils\"\n\nlet cachedPageData\nlet cachedWebpackCompilationHash\nif (process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES) {\n  const { pageData, webpackCompilationHash } = readState()\n  // extract only data that we need to reuse and let v8 garbage collect rest of state\n  cachedPageData = pageData\n  cachedWebpackCompilationHash = webpackCompilationHash\n}\n\ninterface IBuildArgs extends IProgram {\n  directory: string\n  sitePackageJson: PackageJson\n  prefixPaths: boolean\n  noUglify: boolean\n  profile: boolean\n  graphqlTracing: boolean\n  openTracingConfigFile: string\n}\n\nmodule.exports = async function build(program: IBuildArgs): Promise<void> {\n  report.setVerbose(program.verbose)\n\n  if (program.profile) {\n    report.warn(\n      `React Profiling is enabled. This can have a performance impact. See https://www.gatsbyjs.org/docs/profiling-site-performance-with-react-profiler/#performance-impact`\n    )\n  }\n\n  await updateSiteMetadata({\n    name: program.sitePackageJson.name,\n    sitePath: program.directory,\n    lastRun: Date.now(),\n    pid: process.pid,\n  })\n\n  markWebpackStatusAsPending()\n\n  const publicDir = path.join(program.directory, `public`)\n  initTracer(program.openTracingConfigFile)\n  const buildActivity = report.phantomActivity(`build`)\n  buildActivity.start()\n\n  telemetry.trackCli(`BUILD_START`)\n  signalExit(exitCode => {\n    telemetry.trackCli(`BUILD_END`, { exitCode })\n  })\n\n  const buildSpan = buildActivity.span\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { gatsbyNodeGraphQLFunction } = await bootstrap({\n    program,\n    parentSpan: buildSpan,\n  })\n\n  const graphqlRunner = new GraphQLRunner(store, {\n    collectStats: true,\n    graphqlTracing: program.graphqlTracing,\n  })\n\n  const { queryIds } = await calculateDirtyQueries({ store })\n\n  await runStaticQueries({\n    queryIds,\n    parentSpan: buildSpan,\n    store,\n    graphqlRunner,\n  })\n\n  await runPageQueries({\n    queryIds,\n    graphqlRunner,\n    parentSpan: buildSpan,\n    store,\n  })\n\n  await writeOutRequires({\n    store,\n    parentSpan: buildSpan,\n  })\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: gatsbyNodeGraphQLFunction,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirs()\n\n  const buildActivityTimer = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  buildActivityTimer.start()\n  let stats\n  try {\n    stats = await buildProductionBundle(program, buildActivityTimer.span)\n  } catch (err) {\n    buildActivityTimer.panic(structureWebpackErrors(Stage.BuildJavascript, err))\n  } finally {\n    buildActivityTimer.end()\n  }\n\n  const workerPool = WorkerPool.create()\n\n  const webpackCompilationHash = stats.hash\n  if (\n    webpackCompilationHash !== store.getState().webpackCompilationHash ||\n    !appDataUtil.exists(publicDir)\n  ) {\n    store.dispatch({\n      type: `SET_WEBPACK_COMPILATION_HASH`,\n      payload: webpackCompilationHash,\n    })\n\n    const rewriteActivityTimer = report.activityTimer(\n      `Rewriting compilation hashes`,\n      {\n        parentSpan: buildSpan,\n      }\n    )\n    rewriteActivityTimer.start()\n\n    await appDataUtil.write(publicDir, webpackCompilationHash)\n\n    rewriteActivityTimer.end()\n  }\n\n  await flushPendingPageDataWrites()\n  markWebpackStatusAsDone()\n\n  if (process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES) {\n    const { pages } = store.getState()\n    if (cachedPageData) {\n      cachedPageData.forEach((_value, key) => {\n        if (!pages.has(key)) {\n          boundActionCreators.removePageData({\n            id: key,\n          })\n        }\n      })\n    }\n  }\n\n  if (telemetry.isTrackingEnabled()) {\n    // transform asset size to kB (from bytes) to fit 64 bit to numbers\n    const bundleSizes = stats\n      .toJson({ assets: true })\n      .assets.filter(asset => asset.name.endsWith(`.js`))\n      .map(asset => asset.size / 1000)\n    const pageDataSizes = [...store.getState().pageDataStats.values()]\n\n    telemetry.addSiteMeasurement(`BUILD_END`, {\n      bundleStats: telemetry.aggregateStats(bundleSizes),\n      pageDataStats: telemetry.aggregateStats(pageDataSizes),\n      queryStats: graphqlRunner.getStats(),\n    })\n  }\n\n  boundActionCreators.setProgramStatus(`BOOTSTRAP_QUERY_RUNNING_FINISHED`)\n\n  await db.saveState()\n\n  await waitUntilAllJobsComplete()\n\n  // we need to save it again to make sure our latest state has been saved\n  await db.saveState()\n\n  let pagePaths = [...store.getState().pages.keys()]\n\n  // Rebuild subset of pages if user opt into GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES\n  // if there were no source files (for example components, static queries, etc) changes since last build, otherwise rebuild all pages\n  if (process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES) {\n    if (\n      cachedWebpackCompilationHash === store.getState().webpackCompilationHash\n    ) {\n      pagePaths = buildUtils.getChangedPageDataKeys(\n        store.getState(),\n        cachedPageData\n      )\n    } else if (cachedWebpackCompilationHash) {\n      report.info(\n        report.stripIndent(`\n          One or more of your source files have changed since the last time you ran Gatsby. All\n          pages will be rebuilt.\n        `)\n      )\n    }\n  }\n\n  const buildHTMLActivityProgress = report.createProgress(\n    `Building static HTML for pages`,\n    pagePaths.length,\n    0,\n    {\n      parentSpan: buildSpan,\n    }\n  )\n  buildHTMLActivityProgress.start()\n  try {\n    await buildHTML({\n      program,\n      stage: Stage.BuildHTML,\n      pagePaths,\n      activity: buildHTMLActivityProgress,\n      workerPool,\n    })\n  } catch (err) {\n    let id = `95313` // TODO: verify error IDs exist\n    const context = {\n      errorPath: err.context && err.context.path,\n      ref: ``,\n    }\n\n    const match = err.message.match(\n      /ReferenceError: (window|document|localStorage|navigator|alert|location) is not defined/i\n    )\n    if (match && match[1]) {\n      id = `95312`\n      context.ref = match[1]\n    }\n\n    buildHTMLActivityProgress.panic({\n      id,\n      context,\n      error: err,\n    })\n  }\n  buildHTMLActivityProgress.end()\n\n  let deletedPageKeys: Array<string> = []\n  if (process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES) {\n    const deletePageDataActivityTimer = report.activityTimer(\n      `Delete previous page data`\n    )\n    deletePageDataActivityTimer.start()\n    deletedPageKeys = buildUtils.collectRemovedPageData(\n      store.getState(),\n      cachedPageData\n    )\n    await buildUtils.removePageFiles(publicDir, deletedPageKeys)\n\n    deletePageDataActivityTimer.end()\n  }\n\n  const postBuildActivityTimer = report.activityTimer(`onPostBuild`, {\n    parentSpan: buildSpan,\n  })\n  postBuildActivityTimer.start()\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: gatsbyNodeGraphQLFunction,\n    parentSpan: buildSpan,\n  })\n  postBuildActivityTimer.end()\n\n  // Make sure we saved the latest state so we have all jobs cached\n  await db.saveState()\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n  await stopTracer()\n  workerPool.end()\n  buildActivity.end()\n\n  if (\n    process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES &&\n    process.argv.includes(`--log-pages`)\n  ) {\n    if (pagePaths.length) {\n      report.info(\n        `Built pages:\\n${pagePaths\n          .map(path => `Updated page: ${path}`)\n          .join(`\\n`)}`\n      )\n    }\n\n    if (deletedPageKeys.length) {\n      report.info(\n        `Deleted pages:\\n${deletedPageKeys\n          .map(path => `Deleted page: ${path}`)\n          .join(`\\n`)}`\n      )\n    }\n  }\n\n  if (\n    process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES &&\n    process.argv.includes(`--write-to-file`)\n  ) {\n    const createdFilesPath = path.resolve(\n      `${program.directory}/.cache`,\n      `newPages.txt`\n    )\n    const createdFilesContent = pagePaths.length\n      ? `${pagePaths.join(`\\n`)}\\n`\n      : ``\n\n    const deletedFilesPath = path.resolve(\n      `${program.directory}/.cache`,\n      `deletedPages.txt`\n    )\n    const deletedFilesContent = deletedPageKeys.length\n      ? `${deletedPageKeys.join(`\\n`)}\\n`\n      : ``\n\n    await fs.writeFile(createdFilesPath, createdFilesContent, `utf8`)\n    report.info(`.cache/newPages.txt created`)\n\n    await fs.writeFile(deletedFilesPath, deletedFilesContent, `utf8`)\n    report.info(`.cache/deletedPages.txt created`)\n  }\n\n  if (await userGetsSevenDayFeedback()) {\n    showSevenDayFeedbackRequest()\n  } else if (await userPassesFeedbackRequestHeuristic()) {\n    showFeedbackRequest()\n  }\n}\n"],"file":"build.js"}