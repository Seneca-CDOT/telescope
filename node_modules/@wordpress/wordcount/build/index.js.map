{"version":3,"sources":["@wordpress/wordcount/src/index.js"],"names":["loadSettings","type","userSettings","settings","defaultSettings","shortcodes","l10n","length","shortcodesRegExp","RegExp","join","matchWords","text","regex","stripTags","bind","stripHTMLComments","stripShortcodes","stripSpaces","stripHTMLEntities","stripConnectors","stripRemovables","match","matchCharacters","transposeAstralsToCountableChar","transposeHTMLEntitiesToCountableChars","count","matchRegExp","results"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { extend, flow } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { defaultSettings } from './defaultSettings';\nimport stripTags from './stripTags';\nimport transposeAstralsToCountableChar from './transposeAstralsToCountableChar';\nimport stripHTMLEntities from './stripHTMLEntities';\nimport stripConnectors from './stripConnectors';\nimport stripRemovables from './stripRemovables';\nimport stripHTMLComments from './stripHTMLComments';\nimport stripShortcodes from './stripShortcodes';\nimport stripSpaces from './stripSpaces';\nimport transposeHTMLEntitiesToCountableChars from './transposeHTMLEntitiesToCountableChars';\n\n/**\n * Private function to manage the settings.\n *\n * @param {string} type         The type of count to be done.\n * @param {Object} userSettings Custom settings for the count.\n *\n * @return {void|Object|*} The combined settings object to be used.\n */\nfunction loadSettings( type, userSettings ) {\n\tconst settings = extend( defaultSettings, userSettings );\n\n\tsettings.shortcodes = settings.l10n.shortcodes || {};\n\n\tif ( settings.shortcodes && settings.shortcodes.length ) {\n\t\tsettings.shortcodesRegExp = new RegExp(\n\t\t\t'\\\\[\\\\/?(?:' + settings.shortcodes.join( '|' ) + ')[^\\\\]]*?\\\\]',\n\t\t\t'g'\n\t\t);\n\t}\n\n\tsettings.type = type || settings.l10n.type;\n\n\tif (\n\t\tsettings.type !== 'characters_excluding_spaces' &&\n\t\tsettings.type !== 'characters_including_spaces'\n\t) {\n\t\tsettings.type = 'words';\n\t}\n\n\treturn settings;\n}\n\n/**\n * Match the regex for the type 'words'\n *\n * @param {string} text     The text being processed\n * @param {string} regex    The regular expression pattern being matched\n * @param {Object} settings Settings object containing regular expressions for each strip function\n *\n * @return {Array|{index: number, input: string}} The matched string.\n */\nfunction matchWords( text, regex, settings ) {\n\ttext = flow(\n\t\tstripTags.bind( this, settings ),\n\t\tstripHTMLComments.bind( this, settings ),\n\t\tstripShortcodes.bind( this, settings ),\n\t\tstripSpaces.bind( this, settings ),\n\t\tstripHTMLEntities.bind( this, settings ),\n\t\tstripConnectors.bind( this, settings ),\n\t\tstripRemovables.bind( this, settings )\n\t)( text );\n\ttext = text + '\\n';\n\treturn text.match( regex );\n}\n\n/**\n * Match the regex for either 'characters_excluding_spaces' or 'characters_including_spaces'\n *\n * @param {string} text     The text being processed\n * @param {string} regex    The regular expression pattern being matched\n * @param {Object} settings Settings object containing regular expressions for each strip function\n *\n * @return {Array|{index: number, input: string}} The matched string.\n */\nfunction matchCharacters( text, regex, settings ) {\n\ttext = flow(\n\t\tstripTags.bind( this, settings ),\n\t\tstripHTMLComments.bind( this, settings ),\n\t\tstripShortcodes.bind( this, settings ),\n\t\tstripSpaces.bind( this, settings ),\n\t\ttransposeAstralsToCountableChar.bind( this, settings ),\n\t\ttransposeHTMLEntitiesToCountableChars.bind( this, settings )\n\t)( text );\n\ttext = text + '\\n';\n\treturn text.match( regex );\n}\n\n/**\n * Count some words.\n *\n * @param {string} text         The text being processed\n * @param {string} type         The type of count. Accepts ;words', 'characters_excluding_spaces', or 'characters_including_spaces'.\n * @param {Object} userSettings Custom settings object.\n *\n * @example\n * ```js\n * import { count } from '@wordpress/wordcount';\n * const numberOfWords = count( 'Words to count', 'words', {} )\n * ```\n *\n * @return {number} The word or character count.\n */\n\nexport function count( text, type, userSettings ) {\n\tif ( '' === text ) {\n\t\treturn 0;\n\t}\n\n\tif ( text ) {\n\t\tconst settings = loadSettings( type, userSettings );\n\t\tconst matchRegExp = settings[ type + 'RegExp' ];\n\t\tconst results =\n\t\t\t'words' === settings.type\n\t\t\t\t? matchWords( text, matchRegExp, settings )\n\t\t\t\t: matchCharacters( text, matchRegExp, settings );\n\n\t\treturn results ? results.length : 0;\n\t}\n}\n"]}