{"version":3,"sources":["../src/createSubscriptionOnConnect.ts"],"names":["executeMiddlewares","middlewares","webSocket","resolve","length","upgradeReq","req","nextMiddleware","remainingMiddlewares","slice","response","createSubscriptionOnConnect","onConnect","connectionParams","Promise"],"mappings":";;;;;;;AAQA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CACzBC,WADyB,EAEzBC,SAFyB,EAGzBC,OAHyB,EAItB;AACH,MAAIF,WAAW,CAACG,MAAZ,KAAuB,CAA3B,EAA8B;AAAA,QACpBC,UADoB,GACLH,SADK,CACpBG,UADoB;AAE5BF,IAAAA,OAAO,CAAC;AAAEG,MAAAA,GAAG,EAAED;AAAP,KAAD,CAAP;AACD,GAHD,MAGO;AACL,QAAME,cAAc,GAAGN,WAAW,CAAC,CAAD,CAAlC;AACA,QAAMO,oBAAoB,GAAGP,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,CAA7B;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACAH,IAAAA,cAAc,CAACL,SAAS,CAACG,UAAX,EAAuBK,QAAvB,EAAiC;AAAA,aAAMV,kBAAkB,CAACQ,oBAAD,EAAuBN,SAAvB,EAAkCC,OAAlC,CAAxB;AAAA,KAAjC,CAAd;AACD;AACF,CAdD;;AAgBA,IAAMQ,2BAA2B,GAAG,SAA9BA,2BAA8B,CAA4BV,WAA5B,EAA6D;AAC/F;AACA,MAAMW,SAAS,GAAG,SAAZA,SAAY,CAACC,gBAAD,EAA2BX,SAA3B;AAAA,WAChB,IAAIY,OAAJ,CAAe,UAAAX,OAAO;AAAA,aAAIH,kBAAkB,CAACC,WAAD,EAAcC,SAAd,EAAyBC,OAAzB,CAAtB;AAAA,KAAtB,CADgB;AAAA,GAAlB;;AAGA,SAAOS,SAAP;AACD,CAND;;eAQeD,2B","sourcesContent":["import { Response } from 'express';\nimport { WebSocket } from './types';\n\ntype MiddlewareFns = (req: WebSocket['upgradeReq'], res: Response, resolve: (r: { req: WebSocket }) => unknown) => void;\ninterface ReturnOnConnect {\n  req: WebSocket['upgradeReq'];\n}\n\nconst executeMiddlewares = (\n  middlewares: MiddlewareFns[],\n  webSocket: WebSocket,\n  resolve: (value: ReturnOnConnect | PromiseLike<ReturnOnConnect>) => void,\n) => {\n  if (middlewares.length === 0) {\n    const { upgradeReq } = webSocket;\n    resolve({ req: upgradeReq });\n  } else {\n    const nextMiddleware = middlewares[0];\n    const remainingMiddlewares = middlewares.slice(1);\n    const response = {} as Response;\n    nextMiddleware(webSocket.upgradeReq, response, () => executeMiddlewares(remainingMiddlewares, webSocket, resolve));\n  }\n};\n\nconst createSubscriptionOnConnect = <T extends ReturnOnConnect>(middlewares: MiddlewareFns[]) => {\n  // This is called on each message that has a GQL_CONNECTION_INIT message type\n  const onConnect = (connectionParams: Object, webSocket: WebSocket) =>\n    new Promise<T>(resolve => executeMiddlewares(middlewares, webSocket, resolve));\n\n  return onConnect;\n};\n\nexport default createSubscriptionOnConnect;\n"],"file":"createSubscriptionOnConnect.js"}