"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _passport = _interopRequireDefault(require("passport"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var promisifiedAuthentication = function promisifiedAuthentication(req, res, name, options) {
  var p = new Promise(function (resolve, reject) {
    var done = function done(err, user, info) {
      if (err) reject(err);else resolve({
        user: user,
        info: info
      });
    };

    var authFn = _passport["default"].authenticate(name, options, done);

    return authFn(req, res);
  });
  return p;
};

var promisifiedLogin = function promisifiedLogin(req, user, options) {
  return new Promise(function (resolve, reject) {
    var done = function done(err) {
      if (err) reject(err);else resolve();
    };

    req.login(user, options, done);
  });
};

var buildCommonContext = function buildCommonContext(req, additionalContext) {
  return _objectSpread({
    isAuthenticated: function isAuthenticated() {
      return req.isAuthenticated();
    },
    isUnauthenticated: function isUnauthenticated() {
      return req.isUnauthenticated();
    },
    getUser: function getUser() {
      return req.user;
    },
    authenticate: function authenticate(strategyName) {
      throw new Error("Authenticate (".concat(strategyName, ") not implemented for subscriptions"));
    },
    login: function login() {
      throw new Error('Not implemented for subscriptions');
    },
    logout: function logout() {
      throw new Error('Not implemented for subscriptions');
    },
    req: req
  }, additionalContext);
};

// function buildContext(contextParams: RegularContextParams): Context;
// function buildContext(contextParams: SubscriptionContextParams): SubscriptionContext;
var buildContext = function buildContext(contextParams) {
  var req = contextParams.req,
      res = contextParams.res,
      connection = contextParams.connection,
      payload = contextParams.payload,
      additionalContext = _objectWithoutProperties(contextParams, ["req", "res", "connection", "payload"]);

  if (connection) {
    return buildCommonContext(connection.context.req, additionalContext);
  } // The UserObject is without the any in conflict: "'User' is not assignable to type 'UserObjectType'"


  var sharedContext = buildCommonContext(req, additionalContext);
  return _objectSpread({}, sharedContext, {
    authenticate: function authenticate(name, options) {
      return promisifiedAuthentication(req, res, name, options);
    },
    login: function login(user, options) {
      return promisifiedLogin(req, user, options);
    },
    logout: function logout() {
      return req.logout();
    },
    res: res
  });
};

var _default = buildContext;
exports["default"] = _default;
//# sourceMappingURL=buildContext.js.map