{"version":3,"sources":["../src/GraphQLLocalStrategy.ts"],"names":["GraphQLLocalStrategy","options","verify","passReqToCallback","TypeError","name","req","username","email","password","done","err","user","info","error","fail","success","PassportStrategy"],"mappings":";;;;;;;AACA;;;;;;;;;;;;;;;;;;;;IAgBMA,oB;;;AACJ,gCACEC,OADF,EAEEC,MAFF,EAGE;AAAA;;AAAA;;AACA;;AAEA,QAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjC,YAAKC,MAAL,GAAcD,OAAd;AACA,YAAKE,iBAAL,GAAyB,KAAzB;AACD,KAHD,MAGO;AACL,YAAKD,MAAL,GAAcA,MAAd;AACA,YAAKC,iBAAL,GAAyBF,OAAO,CAACE,iBAAjC;AACD;;AACD,QAAI,CAAC,MAAKD,MAAV,EAAkB;AAChB,YAAM,IAAIE,SAAJ,CAAc,iDAAd,CAAN;AACD;;AAED,UAAKC,IAAL,GAAY,eAAZ;AAdA;AAeD;;;;iCAQYC,G,EAAcL,O,EAAkE;AAAA;;AAAA,UACnFM,QADmF,GACrDN,OADqD,CACnFM,QADmF;AAAA,UACzEC,KADyE,GACrDP,OADqD,CACzEO,KADyE;AAAA,UAClEC,QADkE,GACrDR,OADqD,CAClEQ,QADkE;;AAG3F,UAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD,EAAaC,IAAb,EAAsBC,IAAtB,EAAgD;AAC3D,YAAIF,GAAJ,EAAS;AACP,iBAAO,MAAI,CAACG,KAAL,CAAWH,GAAX,CAAP;AACD;;AACD,YAAI,CAACC,IAAL,EAAW;AACT,iBAAO,MAAI,CAACG,IAAL,CAAUF,IAAV,EAAgB,GAAhB,CAAP;AACD;;AACD,eAAO,MAAI,CAACG,OAAL,CAAaJ,IAAb,EAAmBC,IAAnB,CAAP;AACD,OARD;;AAUA,UAAI,KAAKV,iBAAT,EAA4B;AAC1B;AACA,aAAKD,MAAL,CAAYI,GAAZ,EAAiBC,QAAQ,IAAIC,KAA7B,EAAoCC,QAApC,EAA8CC,IAA9C;AACD,OAHD,MAGO;AACL;AACA,aAAKR,MAAL,CAAYK,QAAQ,IAAIC,KAAxB,EAA+BC,QAA/B,EAAyCC,IAAzC;AACD;AACF;;;;EA/C+FO,0B;;eAkDnFjB,oB","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { Strategy as PassportStrategy } from 'passport-strategy';\nimport { Request as ExpressRequest } from 'express';\nimport { PassportContext, IVerifyOptions } from './types';\n\ntype VerifyFn = (username: unknown, password: unknown, done: () => void) => void;\ntype VerifyFnWRequest = <U extends {}, Request extends object = ExpressRequest>(\n  req: Request | PassportContext<U, Request>,\n  username: unknown,\n  password: unknown,\n  done: (error: any, user?: any, options?: IVerifyOptions) => void,\n) => void;\n\ninterface GraphQLLocalStrategyOptions {\n  passReqToCallback?: boolean;\n}\n\nclass GraphQLLocalStrategy<U extends {}, Request extends ExpressRequest = ExpressRequest> extends PassportStrategy {\n  constructor(\n    options?: GraphQLLocalStrategyOptions | VerifyFn | VerifyFnWRequest,\n    verify?: VerifyFn | VerifyFnWRequest,\n  ) {\n    super();\n\n    if (typeof options === 'function') {\n      this.verify = options;\n      this.passReqToCallback = false;\n    } else {\n      this.verify = verify;\n      this.passReqToCallback = options.passReqToCallback;\n    }\n    if (!this.verify) {\n      throw new TypeError('GraphQLLocalStrategy requires a verify callback');\n    }\n\n    this.name = 'graphql-local';\n  }\n\n  verify: VerifyFn | VerifyFnWRequest;\n\n  passReqToCallback: boolean | undefined;\n\n  name: string;\n\n  authenticate(req: Request, options: { username?: string; email?: string; password: string }) {\n    const { username, email, password } = options;\n\n    const done = (err: Error, user: U, info?: IVerifyOptions) => {\n      if (err) {\n        return this.error(err);\n      }\n      if (!user) {\n        return this.fail(info, 401);\n      }\n      return this.success(user, info);\n    };\n\n    if (this.passReqToCallback) {\n      // @ts-ignore - not sure how tow handle this nicely in TS\n      this.verify(req, username || email, password, done);\n    } else {\n      // @ts-ignore - not sure how tow handle this nicely in TS\n      this.verify(username || email, password, done);\n    }\n  }\n}\n\nexport default GraphQLLocalStrategy;\n"],"file":"GraphQLLocalStrategy.js"}