name: e2e Tests Workflow

on:
  workflow_call:

jobs:
  e2e:
    name: End-To-End Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    env:
      # Whichever Docker containers are needed to pass e2e tests, define them here
      DOCKER_CONTAINERS: 'sso feed-discovery auth login kong rest meta elasticsearch redis posts traefik'
      # Postgres database connection string to run db migration
      DATABASE_URL: 'postgresql://postgres:your-super-secret-and-long-postgres-password@localhost/postgres'
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - uses: pnpm/action-setup@v2.2.1

      - uses: actions/setup-node@v2.5.1
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      - uses: docker/setup-buildx-action@v1

      - name: Install playwright
        uses: microsoft/playwright-github-action@v1

      # Pull, build, and run containers, then start e2e tests
      - run: pnpm install
      - name: Pull/Build Docker Containers Necessary for Running E2E Tests
        run: docker compose --env-file ./config/env.development up -d ${{ env.DOCKER_CONTAINERS }}
      - name: Wait for Postgres and Login containers to become fully ready
        run: pnpx -y wait-on -t 60000 tcp:5432 http://localhost:8081/simplesaml
      - name: Apply database migrations
        run: pnpm db:migrate
      - name: Run E2E tests
        id: e2e
        run: pnpm jest:e2e

      - name: Post to a Slack channel
        uses: slackapi/slack-github-action@v1.19.0
        id: slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          payload: |
            {
              "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
          channel-id: 'C03FPSQ53V0'
          if: always()
