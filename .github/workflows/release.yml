name: Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '[0-9]+.[0-9]+.[0-9]+' # Push events to any matching semantic tag. For example, 1.10.1 or 2.0.0.
        # For more details, see https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
        # and https://docs.npmjs.com/about-semantic-versioning

jobs:
  # Confirm that prettier was run on the changes
  prettier:
    name: Prettier Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache pnpm modules
        uses: actions/cache@v2.1.5
        env:
          cache-name: cache-pnpm-modules
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-
      - uses: actions/setup-node@v2.1.5
      - uses: pnpm/action-setup@v1.2.1
        with:
          version: 6.0.1
          run_install: true
      - name: Run prettier-check
        run: |
          pnpm run prettier-check

  # Make sure eslint passes
  # Make sure eslint passes
  eslint:
    name: ESLint Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache pnpm modules
        uses: actions/cache@v2.1.5
        env:
          cache-name: cache-pnpm-modules
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-
      - uses: actions/setup-node@v2.1.5
      - uses: pnpm/action-setup@v1.2.1
        with:
          version: 6.0.1
          run_install: true
      - name: Run eslint
        run: |
          pnpm run eslint

  # Run unit tests on all platforms/versions of node
  unit:
    name: Unit Tests
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [12.x, 14.x]
    steps:
      - uses: actions/checkout@v2
      - name: Cache pnpm modules
        uses: actions/cache@v2.1.5
        env:
          cache-name: cache-pnpm-modules
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node-version }}
      - uses: pnpm/action-setup@v1.2.1
        with:
          version: 6.0.1
          run_install: true
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1
      - name: Run unit tests with default env
        run: |
          pnpm run jest --max-workers ${{ steps.cpu-cores.outputs.count }}

  # Run end-to-end tests along with the microservices in docker-compose on Linux
  e2e:
    name: End-To-End Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x]
    steps:
      - uses: actions/checkout@v2
      - name: Cache pnpm modules
        uses: actions/cache@v2.1.5
        env:
          cache-name: cache-pnpm-modules
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node-version }}
      - uses: microsoft/playwright-github-action@v1
      - name: Start microservices and run e2e tests
        run: |
          pnpm run services:start
          pnpm run jest:e2e

  release:
    needs: [prettier, eslint, unit, e2e]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@main
        with:
          configuration: 'release-changelog-builder-config.json'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{steps.build_changelog.outputs.changelog}}
          draft: false
          prerelease: false
