# NODE_ENV should be one of "development" or "production"
NODE_ENV=development

# PORT is the port used by the web server
PORT=3000

# API_URL is the URL of the Telescope Web API server.  Change this to
# pick which backend server our frontend uses.  If you are developing
# locally, this will be localhost:{PORT}, probably http://localhost:3000.
# Other possible values include:
#
#   (local development)
#   API_URL=http://localhost:3000
#   (our staging server)
#   API_URL=https://dev.telescope.cdot.systems
#   (our production server)
#   API_URL=https://telescope.cdot.systems
API_URL=http://localhost:3000

# PROXY_FRONTEND=1 will allow proxying the Gatsby dev server (http://localhost:8000)
# through our node server (http://localhost:3000). Useful for testing locally.
# To run:
#
# 1. set PROXY_FRONTEND=1 in the .env
# 2. run the web server: `npm start`
# 3. run the Gatsby dev server: `npm run develop`
# 4. open http://localhost:3000/ and you'll get content from http://localhost:8000
PROXY_FRONTEND=

# LOG_LEVEL is used to set the level of debugging for the logs.
# info, error and debug are commonly used levels. See http://getpino.io/#/docs/api?id=level for more info on levels.
# to completely disable all logs, use silent.
LOG_LEVEL=debug

# LOG_FILE is used to set a destination path to write logs. Works in production mode only.
LOG_FILE=

# Used to set if Pino should log are indexed to ElasticSearch, LOG_ELASTIC=1 to enable, if LOG_FILE and LOG_ELASTIC is set,
# LOG_ELASTIC will take priority
LOG_ELASTIC=
# Following are used to set up Pino-Elastic
# Index name for logs to be stored under
INDEX_NAME=logs
# Determines consistency of the write, valid values are: one, quorum or all
CONSISTENCY=one
# Elasticsearch Version
ELASTIC_VERSION=7
# The number of bytes for each bulk insert
FLUSH_BYTES=1000

# FEED_URL url used to access feed list
FEED_URL=https://wiki.cdot.senecacollege.ca/wiki/Planet_CDOT_Feed_List
# Milliseconds to wait after attempting to fetch the feed list when the server is not available
FEED_URL_INTERVAL_MS=30000

# Redis Server info, password may be optional (e.g., leave empty if you don't set one)
REDIS_URL=redis://127.0.0.1
REDIS_PORT=6379
REDIS_PASSWORD=

# MOCK_REDIS=1 will use an in-memory, mock Redis instance. Useful for testing.
MOCK_REDIS=

# MOCK_ELASTIC=1 will use an in-memory, mock Elastic instance. Useful for testing.
MOCK_ELASTIC=

# Elasticsearch info
ELASTIC_URL=http://127.0.0.1
ELASTIC_PORT=9200
# Max number of results per query
ELASTIC_MAX_RESULTS_PER_PAGE=5
# Delay to check connectivity with Elasticsearch in ms
ELASTIC_DELAY_MS=10000

# Kibana info
# Default port # is 5601, change this if using another port #
KIBANA_PORT=5601
# If starting Kibana with Docker, default host is localhost, change this if using another host
KIBANA_HOST=localhost

# https://medium.com/disney-streaming/setup-a-single-sign-on-saml-test-environment-with-docker-and-nodejs-c53fc1a984c9 - is used for this current portion of code

# The Single Sign On (SSO) login service URL
SSO_LOGIN_URL=http://localhost:8080/simplesaml/saml2/idp/SSOService.php

# The callback URL endpoint to be used by the SSO login service (see the /auth route)
SSO_LOGIN_CALLBACK_URL=http://localhost:3000/auth/login/callback

# The Single Logout (SLO) service URL
SLO_LOGOUT_URL=http://localhost:8080/simplesaml/saml2/idp/SingleLogoutService.php

# The callback URL endpoint to be used by the SLO logout service (see the /auth route)
SLO_LOGOUT_CALLBACK_URL=http://localhost:3000/auth/logout/callback

# The SSO Identity Provider's public key certificate. NOTE: this is the public
# key cert of the test login IdP docker container.  Update for staging and prod.
SSO_IDP_PUBLIC_KEY_CERT=MIIDXTCCAkWgAwIBAgIJALmVVuDWu4NYMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwHhcNMTYxMjMxMTQzNDQ3WhcNNDgwNjI1MTQzNDQ3WjBFMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzUCFozgNb1h1M0jzNRSCjhOBnR+uVbVpaWfXYIR+AhWDdEe5ryY+CgavOg8bfLybyzFdehlYdDRgkedEB/GjG8aJw06l0qF4jDOAw0kEygWCu2mcH7XOxRt+YAH3TVHa/Hu1W3WjzkobqqqLQ8gkKWWM27fOgAZ6GieaJBN6VBSMMcPey3HWLBmc+TYJmv1dbaO2jHhKh8pfKw0W12VM8P1PIO8gv4Phu/uuJYieBWKixBEyy0lHjyixYFCR12xdh4CA47q958ZRGnnDUGFVE1QhgRacJCOZ9bd5t9mr8KLaVBYTCJo5ERE8jymab5dPqe5qKfJsCZiqWglbjUo9twIDAQABo1AwTjAdBgNVHQ4EFgQUxpuwcs/CYQOyui+r1G+3KxBNhxkwHwYDVR0jBBgwFoAUxpuwcs/CYQOyui+r1G+3KxBNhxkwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAAiWUKs/2x/viNCKi3Y6blEuCtAGhzOOZ9EjrvJ8+COH3Rag3tVBWrcBZ3/uhhPq5gy9lqw4OkvEws99/5jFsX1FJ6MKBgqfuy7yh5s1YfM0ANHYczMmYpZeAcQf2CGAaVfwTTfSlzNLsF2lW/ly7yapFzlYSJLGoVE+OHEu8g5SlNACUEfkXw+5Eghh+KzlIN7R6Q7r2ixWNFBC/jWf7NKUfJyX8qIG5md1YUeT6GBW9Bm2/1/RiO24JTaYlfLdKK9TYb8sG5B+OLab2DImG99CJ25RkAcSobWNF5zD0O6lgOo3cEdB/ksCq3hmtlC/DlLZ/D8CJ+7VuZnS1rR2naQ==

# Our apps's Entity ID, which is also the URL to our metadata.
SAML_ENTITY_ID=http://localhost:3000/sp

# SECRET = cookie session SECRET. If left empty, one will be set automatically
SECRET=

# ADMINISTRATORS is a list (space delimited) of users who have administrator
# rights. Use the user's nameID (user2@example.com) or hashed version of
# nameID (2b3b2b9ce8).  Either will work.
ADMINISTRATORS=user1@example.com

# Period of time (seconds) that an unprocessed feed must wait before its
# next processing attempt (due to previous attempt responding with HTTP 429)
FEED_PROCESSING_DELAY_SEC=3600

# Feed job queue attempts
FEED_QUEUE_ATTEMPTS=5

# Feed job queue delay(ms)
FEED_QUEUE_DELAY_MS=60000

# Number of concurrent worker processors to run. Use * if you want to run
# one per CPU. Use a number if you want to set it manually, up to a max
# of the CPU count.  If not set, we'll assume 1.
FEED_QUEUE_PARALLEL_WORKERS=1

# Max number of posts per page
MAX_POSTS_PER_PAGE=5

# If you need to do a release, GitHub requires a Personal Access token.
# You can create one at https://github.com/settings/tokens, and get more info:
# https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line
#
# IMPORTANT: DO NOT SHARE OR COMMIT THIS TOKEN!
GITHUB_TOKEN=

# UNSPLASH API
# UNSPLASH_CLIENT_ID=""

# If we wish to override default collection
# UNSPLASH_COLLECTION_ID=""

IMAGE_PORT=4444
