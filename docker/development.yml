################################################################################
# Development containers needed to support local development, testing, and CI.
#
# This docker-compose file is meant to be used with docker-compose.yml as a base:
#
# $ docker-compose --env-file config/env.development up -d
#
# See https://docs.docker.com/compose/production/
################################################################################
version: '3'

services:
  # API Gateway
  nginx:
    build:
      context: ../src/web
      cache_from:
        - docker.cdot.systems/nginx:buildcache
    volumes:
      - ../config/nginx.conf.development.template:/etc/nginx/nginx.conf
    ports:
      - '8000:8000'

  traefik:
    command:
      - '--log.level=DEBUG'
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
    ports:
      # The HTTP port
      - '80:80'
      # The Web UI (enabled by --api.insecure=true)
      - '8080:8080'

  # SSO Identity Provider test service, https://simplesamlphp.org
  # Access to the login page available at http://localhost:8081
  login:
    image: kristophjunge/test-saml-idp
    container_name: 'login'
    ports:
      - '8081:8080'
    environment:
      - SIMPLESAMLPHP_SP_ENTITY_ID=${SAML_ENTITY_ID}
      - SIMPLESAMLPHP_SP_ASSERTION_CONSUMER_SERVICE=${SSO_LOGIN_CALLBACK_URL}
      - SIMPLESAMLPHP_SP_SINGLE_LOGOUT_SERVICE=${SLO_LOGOUT_CALLBACK_URL}
    volumes:
      - ../config/simplesamlphp-users.php:/var/www/simplesamlphp/config/authsources.php
      - ../config/saml20-idp-hosted.php:/var/www/simplesamlphp/metadata/saml20-idp-hosted.php

  # Static Web Content for tests, hosting the contents of src/web/test-web-content.
  # The host can use http://localhost:8888 to access these files, and Docker
  # containers can use http://test-web-content instead.
  test-web-content:
    container_name: 'test-web-content'
    image: 'nginx:stable-alpine'
    ports:
      - '8888:80'
    volumes:
      - ../src/web/test-web-content:/usr/share/nginx/html:ro

  redis:
    ports:
      - '6379:6379'

  elasticsearch:
    ports:
      - '9200:9200'
    environment:
      # Use the minimum possible RAM in development
      - 'ES_JAVA_OPTS=-Xms256m -Xmx256m'
      # We only run a single node
      - discovery.type=single-node

  parser:
    build:
      context: ../src/api/parser
      cache_from:
        - docker.cdot.systems/parser:buildcache
    environment:
      # In development and testing, the Parser service needs to contact the Supabase
      # service directly via Docker vs through the http://localhost/v1/supabase domain.
      - SUPABASE_URL=http://kong:8000
    depends_on:
      - elasticsearch
      - traefik
      - redis
    restart: unless-stopped

  status:
    build:
      context: ../src/api/status
      cache_from:
        - docker.cdot.systems/status:buildcache
    ports:
      - '1111:1111'
    environment:
      - POSTS_URL=http://posts:5555

  image:
    build:
      context: ../src/api/image
      cache_from:
        - docker.cdot.systems/image:buildcache

  sso:
    build:
      context: ../src/api/sso
      cache_from:
        - docker.cdot.systems/sso:buildcache
    environment:
      # In development and testing, the SSO service needs to contact the Supabase
      # service directly via Docker vs through the http://localhost/v1/supabase domain.
      - SUPABASE_URL=http://kong:8000
    depends_on:
      - test-web-content
      - traefik
      - login

  search:
    build:
      context: ../src/api/search
      cache_from:
        - docker.cdot.systems/search:buildcache

  posts:
    build:
      context: ../src/api/posts
      cache_from:
        - docker.cdot.systems/posts:buildcache

  feed-discovery:
    build:
      context: ../src/api/feed-discovery
      cache_from:
        - docker.cdot.systems/feed-discovery:buildcache

  planet:
    build:
      context: ../src/api/planet
      cache_from:
        - docker.cdot.systems/planet:buildcache
    ports:
      - '9876:9876'
    environment:
      - POSTS_URL=http://posts:${POSTS_PORT:-5555}

  dependency-discovery:
    build:
      context: ../src/api/dependency-discovery
      cache_from:
        - docker.cdot.systems/dependency-discovery:buildcache
