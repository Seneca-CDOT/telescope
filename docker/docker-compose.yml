################################################################################
# Base docker-compose.yml for Telescope services. Use the additional
# production.yml file for production, and development.yml for development.
################################################################################
version: '3'

services:
  ##############################################################################
  # Telescope 2.0 Microservices
  ##############################################################################

  # status service
  status:
    container_name: 'status'
    build:
      context: ../src/api/status
      dockerfile: Dockerfile
    environment:
      - NODE_ENV
      - API_HOST
      - STATUS_PORT
      - STATUS_URL
      # Satellite authentication/authorization support
      - JWT_ISSUER
      - JWT_AUDIENCE
      - SECRET
      # TODO - add APM monitoring support for Satellite
      # - ELASTIC_APM_SERVER_URL
      # - ELASTIC_APM_SERVICE_NAME
    depends_on:
      - traefik
    labels:
      # Enable Traefik
      - 'traefik.enable=true'
      # Traefik routing for the status service at /v1/status
      - 'traefik.http.routers.status.rule=PathPrefix(`/${API_VERSION}/status`)'
      # Specify the status service port
      - 'traefik.http.services.status.loadbalancer.server.port=${STATUS_PORT}'
      # Add middleware to this route to strip the /v1/status prefix
      - 'traefik.http.middlewares.strip_status_prefix.stripprefix.prefixes=/${API_VERSION}/status'
      - 'traefik.http.middlewares.strip_status_prefix.stripprefix.forceSlash=true'
      - 'traefik.http.routers.status.middlewares=strip_status_prefix'

  # image service
  image:
    container_name: 'image'
    build:
      context: ../src/api/image
      dockerfile: Dockerfile
    environment:
      - NODE_ENV
      - IMAGE_PORT
      # Satellite authentication/authorization support
      - JWT_ISSUER
      - JWT_AUDIENCE
      - SECRET
    depends_on:
      - traefik
    labels:
      # Enable Traefik
      - 'traefik.enable=true'
      # Traefik routing for the image service at /v1/image
      - 'traefik.http.routers.image.rule=PathPrefix(`/${API_VERSION}/image`)'
      # Specify the image service port
      - 'traefik.http.services.image.loadbalancer.server.port=${IMAGE_PORT}'
      # Add middleware to this route to strip the /v1/image prefix
      - 'traefik.http.middlewares.strip_image_prefix.stripprefix.prefixes=/${API_VERSION}/image'
      - 'traefik.http.middlewares.strip_image_prefix.stripprefix.forceSlash=true'
      - 'traefik.http.routers.image.middlewares=strip_image_prefix'

  # auth service
  auth:
    container_name: 'auth'
    build:
      context: ../src/api/auth
      dockerfile: Dockerfile
    environment:
      - NODE_ENV
      - AUTH_PORT
      - SSO_LOGIN_URL
      - SSO_LOGIN_CALLBACK_URL
      - SLO_LOGOUT_URL
      - SLO_LOGOUT_CALLBACK_URL
      - SSO_IDP_PUBLIC_KEY_CERT
      - SAML_ENTITY_ID
      - ADMINISTRATORS
      - ALLOWED_APP_ORIGINS
      - JWT_EXPIRES_IN
      - USERS_URL
      # Satellite authentication/authorization support
      - JWT_ISSUER
      - JWT_AUDIENCE
      - SECRET
    depends_on:
      - traefik
      - users
    labels:
      # Enable Traefik
      - 'traefik.enable=true'
      # Traefik routing for the auth service at /v1/auth
      - 'traefik.http.routers.auth.rule=PathPrefix(`/${API_VERSION}/auth`)'
      # Specify the auth service port
      - 'traefik.http.services.auth.loadbalancer.server.port=${AUTH_PORT}'
      # Add middleware to this route to strip the /v1/auth prefix
      - 'traefik.http.middlewares.strip_auth_prefix.stripprefix.prefixes=/${API_VERSION}/auth'
      - 'traefik.http.middlewares.strip_auth_prefix.stripprefix.forceSlash=true'
      - 'traefik.http.routers.auth.middlewares=strip_auth_prefix'

  # search service
  search:
    container_name: 'search'
    build:
      context: ../src/api/search
      dockerfile: Dockerfile
    environment:
      - NODE_ENV
      - SEARCH_PORT
      - POSTS_URL
      - ELASTIC_MAX_RESULTS_PER_PAGE
      - ELASTIC_URL=http://elasticsearch
      - ELASTIC_PORT=9200
      # Satellite authentication/authorization support
      - JWT_ISSUER
      - JWT_AUDIENCE
      - SECRET
    depends_on:
      - elasticsearch
      - traefik
    labels:
      # Enable Traefik
      - 'traefik.enable=true'
      # Traefik routing for the search service at /v1/search
      - 'traefik.http.routers.search.rule=PathPrefix(`/${API_VERSION}/search`)'
      # Specify the search service port
      - 'traefik.http.services.search.loadbalancer.server.port=${SEARCH_PORT}'
      # Add middleware to this route to strip the /v1/search prefix
      - 'traefik.http.middlewares.strip_search_prefix.stripprefix.prefixes=/${API_VERSION}/search'
      - 'traefik.http.middlewares.strip_search_prefix.stripprefix.forceSlash=true'
      - 'traefik.http.routers.search.middlewares=strip_search_prefix'

  # posts service
  posts:
    container_name: 'posts'
    build:
      context: ../src/api/posts
      dockerfile: Dockerfile
    environment:
      - NODE_ENV
      - POSTS_PORT
      - POSTS_URL
      # Satellite authentication/authorization support
      - JWT_ISSUER
      - JWT_AUDIENCE
      - SECRET
    depends_on:
      - traefik
      - redis
    labels:
      # Enable Traefik
      - 'traefik.enable=true'
      # Traefik routing for the image service at /v1/image
      - 'traefik.http.routers.posts.rule=PathPrefix(`/${API_VERSION}/posts`)'
      # Specify the posts service port
      - 'traefik.http.services.posts.loadbalancer.server.port=${POSTS_PORT}'
      # Add middleware to this route to strip the /v1/posts prefix
      - 'traefik.http.middlewares.strip_posts_prefix.stripprefix.prefixes=/${API_VERSION}/posts'
      - 'traefik.http.middlewares.strip_posts_prefix.stripprefix.forceSlash=true'
      - 'traefik.http.routers.posts.middlewares=strip_posts_prefix'

  # feed discovery service
  feed-discovery:
    container_name: 'feed-discovery'
    build:
      context: ../src/api/feed-discovery
      dockerfile: Dockerfile
    environment:
      - NODE_ENV
      - FEED_DISCOVERY_PORT
      # Satellite authentication/authorization support
      - JWT_ISSUER
      - JWT_AUDIENCE
      - SECRET
    depends_on:
      - traefik
    labels:
      # Enable Traefik
      - 'traefik.enable=true'
      # Traefik routing for the feed discovery service at /v1/image
      - 'traefik.http.routers.feed-discovery.rule=PathPrefix(`/${API_VERSION}/feed-discovery`)'
      # Specify the feed discovery service port
      - 'traefik.http.services.feed-discovery.loadbalancer.server.port=${FEED_DISCOVERY_PORT}'
      # Add middleware to this route to strip the /v1/feed-discovery prefix
      - 'traefik.http.middlewares.strip_feed_discovery_prefix.stripprefix.prefixes=/${API_VERSION}/feed-discovery'
      - 'traefik.http.middlewares.strip_feed_discovery_prefix.stripprefix.forceSlash=true'
      - 'traefik.http.routers.feed-discovery.middlewares=strip_feed_discovery_prefix'

  # users service
  users:
    container_name: 'users'
    build:
      context: ../src/api/users
      dockerfile: Dockerfile
    environment:
      - NODE_ENV
      - USERS_PORT
      - USERS_URL
      # Satellite authentication/authorization support
      - JWT_ISSUER
      - JWT_AUDIENCE
      - SECRET
    depends_on:
      - traefik
    labels:
      # Enable Traefik
      - 'traefik.enable=true'
      # Traefik routing for the users service at /v1/users
      - 'traefik.http.routers.users.rule=PathPrefix(`/${API_VERSION}/users`)'
      # Specify the users service port
      - 'traefik.http.services.users.loadbalancer.server.port=${USERS_PORT}'
      # Add middleware to this route to strip the /v1/users prefix
      - 'traefik.http.middlewares.strip_users_prefix.stripprefix.prefixes=/${API_VERSION}/users'
      - 'traefik.http.middlewares.strip_users_prefix.stripprefix.forceSlash=true'
      - 'traefik.http.routers.users.middlewares=strip_users_prefix'

  # parser service - disabled, https://github.com/Seneca-CDOT/telescope/issues/2111
  # parser:
  #   container_name: 'parser'
  #   build:
  #     context: ../src/api/parser
  #     dockerfile: Dockerfile
  #   environment:
  #     - NODE_ENV
  #     - PARSER_PORT
  #     - USERS_URL
  #     # Satellite authentication/authorization support
  #     - JWT_ISSUER
  #     - JWT_AUDIENCE
  #     - SECRET
  #   depends_on:
  #     - traefik
  #     - redis
  #     - users
  #     - elasticsearch
  #   labels:
  #     # Enable Traefik
  #     - 'traefik.enable=true'
  #     # Traefik routing for the parser service at /v1/parser
  #     - 'traefik.http.routers.parser.rule=PathPrefix(`/${API_VERSION}/parser`)'
  #     # Specify the parser service port
  #     - 'traefik.http.services.parser.loadbalancer.server.port=${PARSER_PORT}'
  #     # Add middleware to this route to strip the /v1/parser prefix
  #     - 'traefik.http.middlewares.strip_parser_prefix.stripprefix.prefixes=/${API_VERSION}/parser'
  #     - 'traefik.http.middlewares.strip_parser_prefix.stripprefix.forceSlash=true'
  #     - 'traefik.http.routers.parser.middlewares=strip_parser_prefix'

  # planet service
  planet:
    container_name: 'planet'
    build:
      context: ../src/api/planet
      dockerfile: Dockerfile
    environment:
      - NODE_ENV
      - PLANET_PORT
      - POSTS_URL

  ##############################################################################
  # Third-Party Dependencies and Support Services
  ##############################################################################

  # nginx
  nginx:
    build:
      context: ../src/web
      dockerfile: Dockerfile
      # next.js needs build-time access to a number of API URL values, forward as ARGs
      args:
        # Web front-end URL
        - WEB_URL=${WEB_URL}
        # Telescope 1.0 API URL
        - API_URL=${API_URL}
        # Telescope 2.0 Microservice URLs
        - IMAGE_URL=${IMAGE_URL}
        - AUTH_URL=${AUTH_URL}
        - POSTS_URL=${POSTS_URL}
        - SEARCH_URL=${SEARCH_URL}
        - FEED_DISCOVERY_URL=${FEED_DISCOVERY_URL}
        - STATUS_URL=${STATUS_URL}
    container_name: 'nginx'
    environment:
      - TELESCOPE_HOST
      - API_HOST
    restart: unless-stopped
    depends_on:
      - traefik

  # API Gateway
  traefik:
    image: traefik:v2.5.0
    container_name: 'traefik'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - 'traefik.enable=true'

  # Redis
  redis:
    image: redis:latest
    container_name: 'redis'
    command: ['redis-server', '--appendonly', 'yes']
    volumes:
      - ../redis-data:/data

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    container_name: 'elasticsearch'
    environment:
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      - discovery.type=single-node
    # See the following:
    # - https://www.elastic.co/guide/en/elastic-stack-get-started/current/get-started-docker.html,
    # - https://github.com/deviantony/docker-elk/issues/243
